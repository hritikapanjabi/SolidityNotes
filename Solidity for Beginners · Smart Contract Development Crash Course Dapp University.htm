<!DOCTYPE html>
<html class="wf-lato-n4-active wf-lato-i4-active wf-lato-n7-active wf-roboto-n4-active wf-roboto-n7-active wf-roboto-i4-active wf-lato-i7-active wf-roboto-i7-active wf-active"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><script type="text/javascript" async="" src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/conversion_async.js"></script><script type="text/javascript" async="" src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/analytics.js"></script><script type="text/javascript" async="" src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/js_002"></script>
    <title>
      Solidity for Beginners · Smart Contract Development Crash Course | Dapp University
    </title>
    <meta name="csrf-param" content="authenticity_token">
<meta name="csrf-token" content="cAZkLD4/1noXFG/LARZ8Co9id0/2AGiIxAN+vzQRMuvY5hlrEfm0Duly96bLHcNoBquqauZ78NCCSTuivsyEdw==">
    <!-- Google -->
<meta name="description" content="Today I'm going to show you how to get started programming with the &lt;a href=&quot;https://solidity.readthedocs.io/en/v0.5.1/&quot; target=&quot;_blank&quot;&gt;Solidity&lt;/a&gt; so that you can become a blockchain developer. I'll show you how to write your first Ethereum smart contracts with Solidity as a beginner! You don't have know anything about the language to get started with this tutorial. We'll even do all the programming inside your web browser so you won't have install any development tools or anything like that.
">
<meta name="author" content="Gregory McCubbin">

<!-- Bootstrap Responsive -->
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<!-- OG/Facebook -->
<meta property="og:site_name" content="Dapp University">
<meta property="og:title" content="Solidity for Beginners · Smart Contract Development Crash Course | Dapp University">
<meta property="og:description" content="Today I'm going to show you how to get started programming with the &lt;a href=&quot;https://solidity.readthedocs.io/en/v0.5.1/&quot; target=&quot;_blank&quot;&gt;Solidity&lt;/a&gt; so that you can become a blockchain developer. I'll show you how to write your first Ethereum smart contracts with Solidity as a beginner! You don't have know anything about the language to get started with this tutorial. We'll even do all the programming inside your web browser so you won't have install any development tools or anything like that.
">
<meta property="og:image" content="https://img.youtube.com/vi/MnSmc7Hto2k/maxresdefault.jpg">
<meta property="og:url" content="https://www.dappuniversity.com/articles/solidity-tutorial">

<!-- Twitter -->
<meta name="twitter:site" content="@dappuniversity">
<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:image:alt" content="Today I'm going to show you how to get started programming with the &lt;a href=&quot;https://solidity.readthedocs.io/en/v0.5.1/&quot; target=&quot;_blank&quot;&gt;Solidity&lt;/a&gt; so that you can become a blockchain developer. I'll show you how to write your first Ethereum smart contracts with Solidity as a beginner! You don't have know anything about the language to get started with this tutorial. We'll even do all the programming inside your web browser so you won't have install any development tools or anything like that.
">
<meta name="twitter:title" content="Solidity for Beginners · Smart Contract Development Crash Course | Dapp University">
<meta name="twitter:description" content="Today I'm going to show you how to get started programming with the &lt;a href=&quot;https://solidity.readthedocs.io/en/v0.5.1/&quot; target=&quot;_blank&quot;&gt;Solidity&lt;/a&gt; so that you can become a blockchain developer. I'll show you how to write your first Ethereum smart contracts with Solidity as a beginner! You don't have know anything about the language to get started with this tutorial. We'll even do all the programming inside your web browser so you won't have install any development tools or anything like that.
">
<meta name="twitter:image" content="https://img.youtube.com/vi/MnSmc7Hto2k/maxresdefault.jpg">
<meta name="twitter:creator" content="@dappuniversity">

    <!-- google fonts -->
    <link href="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/css.css" rel="stylesheet">
    <link href="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/css_002.css" rel="stylesheet">
    <!-- ion icons -->
    <link rel="stylesheet" type="text/css" href="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/ionicons.css">
    <link rel="stylesheet" media="all" href="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/application-91d7f03441c1554d79dcab60c2414ae15516b41ed1d5a4b8.css" data-turbolinks-track="reload">
    <script src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/355454808300933.js" async=""></script><script async="" src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/fbevents.js"></script><script async="" src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/gtm.js"></script><script src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/application-1151a1024549f6c2def8a061ce518ff28bf6c4638b9efe203.js" data-turbolinks-track="reload"></script>
    <!-- Global site tag (gtag.js) - Google Analytics -->
<script async="" src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/js"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-116665898-1');

</script>

    <!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-TVX39V7');</script>
<!-- End Google Tag Manager -->

    <!-- Global site tag (gtag.js) - Google Ads: 938295863 -->
<script async="" src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/js_003"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'AW-938295863');
</script>

    <!-- Facebook Pixel Code -->
<script>
  !function(f,b,e,v,n,t,s)
  {if(f.fbq)return;n=f.fbq=function(){n.callMethod?
  n.callMethod.apply(n,arguments):n.queue.push(arguments)};
  if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';
  n.queue=[];t=b.createElement(e);t.async=!0;
  t.src=v;s=b.getElementsByTagName(e)[0];
  s.parentNode.insertBefore(t,s)}(window, document,'script',
  'https://connect.facebook.net/en_US/fbevents.js');
  fbq('init', '355454808300933');
  fbq('track', 'PageView');
</script>
<noscript><img height="1" width="1" style="display:none"
  src="https://www.facebook.com/tr?id=355454808300933&ev=PageView&noscript=1"
/></noscript>
<!-- End Facebook Pixel Code -->

    <!-- This is a solution for faster font-awesome load times -->
<!-- https://stackoverflow.com/questions/35877994/font-awesome-is-loading-very-slow -->
<script type="text/javascript">
  (function() { var css = document.createElement('link'); css.href = '//netdna.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css'; css.rel = 'stylesheet'; css.type = 'text/css'; document.getElementsByTagName('head')[0].appendChild(css); })();
</script><link href="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/font-awesome.css" rel="stylesheet" type="text/css">

    <link rel="icon" type="image/png" href="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/logo_navbar-fe98a842d56267277b9fc8c4a8b079ae930b1f1c4d71f337.png">
    <!-- For youtube button -->
    <script src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/platform.js" gapi_processed="true"></script>
    <!-- Highlight JS -->
    <link rel="stylesheet" href="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/default.css">
    <script src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/highlight.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
    <!-- CONVERTFLOW -->
    <script async="" src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/9054.js"></script>
  <link rel="stylesheet" href="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/css_003.css" media="all"><script src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/a"></script></head>

  <body style="" class="">
    <!-- Google Tag Manager (noscript) -->
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-TVX39V7"
height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
<!-- End Google Tag Manager (noscript) -->

    <nav id="navbar" class="navbar navbar-expand-lg navbar-light bg-light">
  <a class="navbar-brand" href="https://www.dappuniversity.com/">
    <img src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/logo_navbar-fe98a842d56267277b9fc8c4a8b079ae930b1f1c4d71f337.png" alt="Logo navbar" width="50">
  </a>
  <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarColor03" aria-controls="navbarColor03" aria-expanded="false" aria-label="Toggle navigation" style="">
    <span class="navbar-toggler-icon"></span>
  </button>

  <div class="collapse navbar-collapse" id="navbarColor03">
    <ul class="navbar-nav ml-auto">
      <li class="nav-item">
        <a class="site-header nav-link" href="https://www.dappuniversity.com/bootcamp">Bootcamp</a>
      </li>
      <li class="nav-item dropdown">
        <a class="nav-link dropdown-toggle site-header" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
          Free Tutorials
        </a>
        <div class="dropdown-menu" aria-labelledby="navbarDropdown">
          <a class="dropdown-item site-header" href="https://www.dappuniversity.com/articles/blockchain-app-tutorial">Blockchain Tutorial</a>
          <a class="dropdown-item site-header" href="https://www.dappuniversity.com/articles/the-ultimate-ethereum-dapp-tutorial">Dapp Tutorial</a>
          <a class="dropdown-item site-header" href="https://www.dappuniversity.com/articles/code-your-own-cryptocurrency-on-ethereum">ICO Tutorial</a>
          <div class="dropdown-divider"></div>
          <a class="blue-text dropdown-item site-header" href="https://www.dappuniversity.com/free-download">⬇️ Download Tutorials</a>
        </div>
      </li>
      <li class="nav-item dropdown">
        <a class="nav-link dropdown-toggle site-header" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
          Launch ICO
        </a>
        <div class="dropdown-menu" aria-labelledby="navbarDropdown">
          <a class="dropdown-item site-header" href="https://www.dappuniversity.com/ico-solution">🚀 ICO Solution</a>
          <a class="dropdown-item site-header" href="https://www.dappuniversity.com/ico-checklist">✅ ICO Checklist</a>
        </div>
      </li>

      <li class="nav-item">
        <a class="site-header nav-link" href="https://www.dappuniversity.com/#latestVideos">Trending Videos</a>
      </li>
      <li class="nav-item">
        <a class="site-header nav-link" href="mailto:gregory@dappuniversity.com?body=Hi%20there%2C%20I%20was%20browsing%20your%20website%20and%20wanted%20to%20connect.&amp;subject=dappuniveristy.com">Hire Me</a>
      </li>
    </ul>
  </div>
</nav>

    <div id="layout">
        <div class="alert alert-success">
    🚨 I just released a new article: <a href="https://www.dappuniversity.com/articles/solidity">Master Solidity for Blockchain: Step-by-Step Guide</a> 🚨
  </div>

      
<!-- FIXME: Absorb styles from videos.scss -->
<!-- TODO: Refactor with shared template -->

<div class="container">
  <div class="row">
    <main id="article-show" class="col-md-9 ml-sm-auto col-lg-10 px-4">
      <h1>Solidity for Beginners · Smart Contract Development Crash Course</h1>
      <p class="text-muted">By Gregory McCubbin · <time datetime="2020-06-14">June 14, 2020</time></p>
        <div class="description">
          <p>Hey everybody, it’s <a target="_blank" href="https://www.twitter.com/DappUniversity">Gregory</a> from <a target="_blank" href="https://www.youtube.com/c/DappUniversity">Dapp University</a>!</p>

          <p>Today I'm going to show you how to get started programming with the <a href="https://solidity.readthedocs.io/en/v0.5.1/">Solidity</a>
 so that you can become a blockchain developer. I'll show you how to 
write your first Ethereum smart contracts with Solidity as a beginner! 
You don't have know anything about the language to get started with this
 tutorial. We'll even do all the programming inside your web browser so 
you won't have install any development tools or anything like that.
</p>
        </div>

        <div class="video-player">
  <div id="video-wrapper" class="" style=""><div class="embed-responsive embed-responsive-16by9"><iframe class="embed-responsive-item" src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/MnSmc7Hto2k.htm" allowfullscreen=""></iframe></div></div>

  <div class="row video-buttons">
    <div class="col-12">
      <!-- Button to Open the Modal -->
      <a id="premiumCourseVideoCTA" class="btn btn-primary btn-block" href="https://www.dappuniversity.com/bootcamp">
        <i class="icon ion-university"></i> <span>JOIN MY FREE TRAINING!</span>
</a>    </div>
  </div>
</div>


      <section class="body">
        <h2>Table of Contents</h2>
<p>Here is a summary of what we’ll cover:</p>
<ol>
  <li><a href="#1">Intro To Solidity</a></li>
  <li><a href="#2">Data Types and Data Structures</a></li>
  <li><a href="#3">Function Visibility, Modifiers &amp; Time</a></li>
  <li><a href="#4">Sending Ether &amp; Events</a></li>
  <li><a href="#5">Smart Contract Interaction &amp; Inheritance</a></li>
</ol>

<h2 id="1">#1 · Intro To Solidity</h2>
<p>Watch the video above to follow along with this step-by-step introduction!</p>

<p>Solidity is the main programming language for writing smart contracts
 for the Ethereum blockchain. It is a contract-oriented language, which 
means that smart contracts are responsible for storing all of the 
programming logic that transacts with the blockchain. It's a high-level 
programming language that looks a lot like JavaScript, Python, and C++. 
It's designed to run on the Ethereum Virtual Machine (EVM), which is 
hosted on Ethereum Nodes that are connected to the blockchain. It is 
statically typed, and supports inheritance, libraries, and more! In 
short, it has all the capability that you need in order build industrial
 strength blockchain applications.</p>

<img src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/remix.png" alt="Remix Solidity IDE">

<p>We're going to use <a href="https://remix.ethereum.org/" target="_blank">Remix</a>
 to write all of the code in this tutorial. Remix is a browser-based IDE
 that allows you to write, compile, deploy smart contracts! It has a lot
 of nice features like persistent file storage! We'll use Remix so that 
we don't have to download any developer tools or install anything to get
 started. Head on over to Remix in a new tab in order to follow along 
with this tutorial.</p>

<p>Let's start by creating a new file to write some Solidity code. You 
can do this in the file browser on the left hand side of the screen.</p>

<img src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/new-file.png" alt="New Solidity File">

<p>Let's create a new file named <code>MyContract.sol</code>. On the first line of this file, we'll declare the version of the solidity programming language we want to use:</p>

<pre><code class="bash hljs">pragma solidity ^0.4.24;</code></pre>

<p>Now we can declare the smart contract like this:</p>

<pre><code class="hljs cpp">pragma solidity ^<span class="hljs-number"><span class="hljs-number">0.4</span></span><span class="hljs-number"><span class="hljs-number">.24</span></span>;
contract MyContract {
    <span class="hljs-comment"><span class="hljs-comment">// ...</span></span>
}
</code></pre>

<p>Let me explain a few things before we continue. A smart contract is a
 piece of code that gets executed on the Ethereum blockchain. It 
functions somewhat like an API microservice on the web that is publicly 
accessible to everyone. All of the code of the smart contract is visible
 to the public, and we can allow anyone connected to the network to call
 functions on the smart contract.</p>

<p>Now let's continue building out this smart contract. First, we'll 
program a simple "storage" smart contract that will be able to:</p>

<ul>
    <li>Store a value</li>
    <li>Retrieve this value</li>
</ul>

<p>We'll start by creating a way to store a string value in the smart contract like this. We'll do that with a variable called <code>value</code>. Solidity is a statically typed language, so we must first specify the data type when declaring the variable like this:</p>

<pre><code class="hljs nginx"><span class="hljs-attribute"><span class="hljs-attribute">pragma</span></span> solidity<span class="hljs-regexp"><span class="hljs-regexp"> ^0.4.24</span></span>;
<span class="hljs-attribute"><span class="hljs-attribute">contract</span></span> MyContract {
    <span class="hljs-attribute"><span class="hljs-attribute">string</span></span> value;

}
</code></pre>

<p>This variable is called a "state variable" because it actually 
persists data to the blockchain. Anytime that we set this value, the 
string will be saved to the blockchain! It will get written to storage, 
not memory. This variable also has special scope, as it is accessible to
 the entire smart contract unlike a local variable which is only 
accessible inside of functions, and will not persist after the function 
has been called. We'll see more examples of this as we continue along 
with this tutorial.</p>

<p>Now let's create a function to read this value from storage. We'll start by declaring a function called <code>get()</code> with the function keyword like this:</p>

<pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">function</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">get</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span></span>{
    <span class="hljs-comment"><span class="hljs-comment">// ...</span></span>
}
</code></pre>

<p>Now we'll return the value from the state variable with the <code>return</code> keyword like this:</p>

<pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">function</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">get</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span></span>{
    <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> value;
}
</code></pre>

<p>Now we'll set the "visibility" of this function to <code>public</code> so that anyone connected to the blockchain can call it (not just from within the smart contract code itself):</p>

<pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-function">function </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">get</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> view </span></span>{
    <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> <span class="hljs-keyword"><span class="hljs-keyword">value</span></span>;
}
</code></pre>

<p>Finally, we'll specify the return value <code>string</code> for the function:</p>

<pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-function">function </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">get</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> view </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">returns</span></span></span><span class="hljs-function">(</span><span class="hljs-params"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">string</span></span></span></span></span><span class="hljs-function">) </span></span>{
    <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> <span class="hljs-keyword"><span class="hljs-keyword">value</span></span>;
}
</code></pre>

<p>Awesome! Now we have a way to read this value from the smart 
contract. I'll show you how to do this after we compile it momentarily. 
Before we get there, let's create a way to set this value from outside 
the smart contract. We'll create a <code>set</code> function like this:</p>

<pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-function">function </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">set</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(</span></span><span class="hljs-built_in"><span class="hljs-function"><span class="hljs-params"><span class="hljs-built_in">string</span></span></span></span><span class="hljs-function"><span class="hljs-params"> _value)</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span></span>{
    <span class="hljs-comment"><span class="hljs-comment">// ...</span></span>
}
</code></pre>

<p>We simply created a function that accepts a <code>_value</code> argument of <code>string</code>
 type. This function is also publicly visible so that anyone connected 
to the blockchain can call it. Now let's actually update the smart 
contract <code>value</code> like this:</p>

<pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-function">function </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">set</span></span></span><span class="hljs-function">(</span><span class="hljs-params"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">string</span></span></span></span><span class="hljs-function"><span class="hljs-params"> _value</span></span></span><span class="hljs-function">) </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span></span>{
    <span class="hljs-keyword"><span class="hljs-keyword">value</span></span> = _value;
}
</code></pre>

<p>Here we simply assigned the passed in <code>_value</code> and assigned it to the <code>value</code> state variable. Notice that <code>_value</code>,
 prepended by an underscore is simply a local variable. This is a common
 convention when writing Solidity code, as well as other languages.</p>

<p>Now let's set a default value for the <code>value</code> state variable. We'll do that inside the smart contract constructor function like this:</p>

<pre><code class="hljs cs">constructor() <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> {
    <span class="hljs-keyword"><span class="hljs-keyword">value</span></span> = <span class="hljs-string"><span class="hljs-string">"myValue"</span></span>;
}
</code></pre>

<p>We first declare the constructor function with the <code>constructor</code> keyword. This function is run only once, whenever the smart contract is deployed. It also must have the <code>public</code> visibility.</p>

<p>Now that's the complete source code! Let's see how we can compile and
 deploy this smart contract. First we'll set the compiler version in the
 right hand side of your browser. We'll choose version <code>0.4.25</code> to compile this code.</p>

<img src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/compiler.png" alt="Compiler Version">


<p>Now, let's choose the environment. I'll select the JavaScript virtual
 machine, which will give us a simulated blockchain inside our browser.</p>

<img src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/javascript-vm.png" alt="JavaScript Virtual Machine">

<p>Now we can easily deploy this with a single click of a button!</p>

<img src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/deploy.png" alt="Deploy Smart Contract Button">

<p>Awesome! You've just deployed the smart contract. You can interact 
with the smart contract by calling its functions below, with the form 
that was generated based upon the smart contract's interface.</p>

<img src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/functions.png" alt="Smart Contract Functions">

<p>First, let's read the value. Let's click the <code>get()</code> function. You should see the default <code>"myValue"</code> that was set in the constructor.</p>

<p>Now let's update the value with the <code>set()</code> function. Add a new value inside the form field, just make sure that you wrap it in quotation marks like this: <code>"New Value"</code>. Now run it! Now read the value again. It should changed to <code>"New Value"</code>!</p>

<img src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/transactions.png" alt="Blockchain Transaction History">

<p>You might have noticed this transaction window below the text editor.
 This is a complete list of all the transactions on this virtual 
blockchain. Remember, the Etherum blockchain is made up of bundles of 
records called "blocks" which are "chained together" to make up the 
public ledger. The basic units of all these blocks are transactions. 
You're seeing them listed here below. You can click the "down" arrow to 
see all details of the receipt. They look like this:</p>

<img src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/reciept.htm" alt="Blockchain Transaction Receipt">

<p>Alright that's it! 🎉 You've just written your first Ethereum smart 
contract with the Solidity programming language! Let's move on to the 
next section where we'll build off of this code and learn more about the
 language!</p>

<h2 id="2">#2 · Data Types and Data Structures</h2>

<div id="video-wrapper">
  <div class="embed-responsive embed-responsive-16by9">
    <iframe class="embed-responsive-item" src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/hO62lD_Ulys.htm" allowfullscreen=""></iframe>
  </div>
</div>

<p>Before we move on, let's update the code in our smart contract to be 
compatible with the latest version of Solidity at the time of writing 
this article. We can modify the first line in the smart contract code 
like this:</p>

<pre><code class="hljs css"><span class="hljs-selector-tag"><span class="hljs-selector-tag">pragma</span></span> <span class="hljs-selector-tag"><span class="hljs-selector-tag">solidity</span></span> ^0<span class="hljs-selector-class"><span class="hljs-selector-class">.5</span></span><span class="hljs-selector-class"><span class="hljs-selector-class">.1</span></span>;</code></pre>

<p>Doing this will help us learn best practices for the current version 
of Solidity moving forward! Now let's address the warnings for the new 
version of solidity. First, modify the <code>get()</code> function to look like this:</p>

<pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-function">function </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">get</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> view </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">returns</span></span></span><span class="hljs-function">(</span><span class="hljs-params"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">string</span></span></span></span><span class="hljs-function"><span class="hljs-params"> memory</span></span></span><span class="hljs-function">) </span></span>{
    <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> <span class="hljs-keyword"><span class="hljs-keyword">value</span></span>;
}
</code></pre>

<p>Note the <code>memory</code> distinction. We'll do the same for the <code>set()</code> function:</p>

<pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-function">function </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">set</span></span></span><span class="hljs-function">(</span><span class="hljs-params"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">string</span></span></span></span><span class="hljs-function"><span class="hljs-params"> memory _value</span></span></span><span class="hljs-function">) </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span></span>{
    <span class="hljs-keyword"><span class="hljs-keyword">value</span></span> = _value;
}
</code></pre>

<p>Great! Now that we're up to date, let's talk about basic data types 
and data structures so that you can start implementing them into your 
own Ethereum smart contracts. We'll do this by first creating state 
variables of varying data types. First, let's look at some nice features
 of state variables provided by Solidity. Currently, we simply declare 
the <code>value</code> state variable, and the use the <code>get()</code> function to set it's value. There is a shortcut in solidity that makes this much easier. We can simply do this:</p>

<pre><code class="hljs cs"><span class="hljs-keyword"><span class="hljs-keyword">string</span></span> <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> <span class="hljs-keyword"><span class="hljs-keyword">value</span></span>;</code></pre>

<p>This sets the visibility of the state variable to <code>public</code>, which means that anyone outside of the smart contract can read its value. When we do this, Solidity provides a <code>value()</code> function for free! Now we no longer need the <code>get()</code> function! We can also assign a default value to the state variable like this:</p>

<pre><code class="hljs cs"><span class="hljs-keyword"><span class="hljs-keyword">string</span></span> <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> <span class="hljs-keyword"><span class="hljs-keyword">value</span></span> = <span class="hljs-string"><span class="hljs-string">"myValue"</span></span>;</code></pre>

<p>Now we no longer need to set this in the <code>constructor</code> 
function either! That really reduces the amount of code we have to 
write. We can also set this value as a constant that will never change 
like this: </p>

<pre><code class="hljs cs"><span class="hljs-keyword"><span class="hljs-keyword">string</span></span> <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> constant <span class="hljs-keyword"><span class="hljs-keyword">value</span></span> = <span class="hljs-string"><span class="hljs-string">"myValue"</span></span>;</code></pre>

<p>Now that we've done this, we must remove the <code>set()</code> function because Solidity will not allow us to update this value since it is a constant.</p>

<p>That's an overview of the shortcuts Solidity provides for state 
variables. Now let's create some more state variables to examine some 
different data types available in Solidity. Just like the <code>string</code>
 state variable, we always declare the data type, then the visibility 
before declaring the variable name. First, we can create a <code>boolean</code> state variable like this:</p>

<pre><code class="hljs cpp"><span class="hljs-keyword"><span class="hljs-keyword">bool</span></span> <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> myBool = <span class="hljs-literal"><span class="hljs-literal">true</span></span>;</code></pre>

<p>This can be either <code>true</code> or <code>false</code>.Now we can create an unsigned integer like this:</p>

<p>Now we can create an integer like this:</p>

<pre><code class="hljs cpp"><span class="hljs-keyword"><span class="hljs-keyword">int</span></span> <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> myInt = <span class="hljs-number"><span class="hljs-number">1</span></span>;</code></pre>

<p>Integers can be positive or negative, i.e., signed. If you don't want
 a number to be negative, you can create an unsigned integer like this:</p>

<pre><code class="hljs cs"><span class="hljs-keyword"><span class="hljs-keyword">uint</span></span> <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> myUint = <span class="hljs-number"><span class="hljs-number">1</span></span>;</code></pre>

<p>We can specify the number of bits for the number. The above example defaults to 256 bits. We can be explicit like this:</p>

<pre><code class="hljs cpp">uint256 <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> myUint256 = <span class="hljs-number"><span class="hljs-number">9999</span></span>;</code></pre>

<p>We can also restrict the value to 8 bits, like this:</p>

<pre><code class="hljs cpp">uint8 <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> myUint8 = <span class="hljs-number"><span class="hljs-number">8</span></span>;</code></pre>

<p>&nbsp;</p>

<h3>Enums</h3>
<p>Now let's go over some basic data structures in solidity. First, let's look at the <code>Enum</code>
 data structure, which are a way of keeping track of enumerated lists in
 Solidity. We can check against this list whenever you're writing smart 
contracts. Let's create an enum in the smart contract like this:</p>

<pre><code class="hljs cpp"><span class="hljs-keyword"><span class="hljs-keyword">enum</span></span> State { Waiting, Ready, Active }</code></pre>

<p>Just as an example, this will help us keep track of the <code>active</code> state of the smart contract by providing <code>Waiting</code>, <code>Ready</code>, and <code>Active</code> options. We can check the current state of the smart contract like this:</p>

<pre><code class="hljs cpp">State <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> state;</code></pre>

<p>Now, we can set the default state in the constructor:</p>

<pre><code class="hljs javascript"><span class="hljs-keyword"><span class="hljs-keyword">constructor</span></span>() public {
    state = State.Waiting;
}</code></pre>

<p>Now, we can set the default state in the constructor:</p>

<pre><code class="hljs javascript"><span class="hljs-keyword"><span class="hljs-keyword">constructor</span></span>() public {
    state = State.Waiting;
}</code></pre>

<p>We can update the current state to <code>active</code> like this:</p>

<pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">function</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">activate</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">public</span></span></span><span class="hljs-function"> </span></span>{
    state = State.Active;
}</code></pre>

<p>And finally, we can check against the enum list to see if the state is currently active like this:</p>

<pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">function</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">isActive</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">public</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">view</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">returns</span></span></span><span class="hljs-function">(</span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">bool</span></span></span><span class="hljs-function">) </span></span>{
    <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> state == State.Active;
}</code></pre>

<p>Now the final smart contract code should look like this:</p>

<pre><code class="hljs javascript">pragma solidity <span class="hljs-number"><span class="hljs-number">0.5</span></span><span class="hljs-number"><span class="hljs-number">.1</span></span>;

contract MyContract {
    enum State { Waiting, Ready, Active }
    State public state;

    <span class="hljs-keyword"><span class="hljs-keyword">constructor</span></span>() public {
        state = State.Waiting;
    }

    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">function</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">activate</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">public</span></span></span><span class="hljs-function"> </span></span>{
        state = State.Active;
    }

    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">function</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">isActive</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">public</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">view</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">returns</span></span></span><span class="hljs-function">(</span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">bool</span></span></span><span class="hljs-function">) </span></span>{
        <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> state == State.Active;
    }
}</code></pre>

<p>That's an example of how you can use enums inside your smart 
contracts to track state! Just as another example, this is very useful 
for tracking the state of a crowdsale ICO smart contract that is <code>open</code> or <code>closed</code>. You can check that out in my other tutorial where I show you how to <a href="https://www.dappuniversity.com/articles/real-world-ico">build a real world ICO</a>.</p>

<h3>Structs</h3>

<p> Solidity allows you to define your own data types with <code>Structs</code>.
 You can basically model any kind of data you want with arbitrary 
attributes of varying data types. Let's look at how this works by 
creating a <code>people</code> struct:</p>

<pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">struct</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">Person</span></span></span><span class="hljs-class"> {</span></span>
    <span class="hljs-built_in"><span class="hljs-built_in">string</span></span> _firstName;
    <span class="hljs-built_in"><span class="hljs-built_in">string</span></span> _lastName;
}
</code></pre>

<p>We've modeled a person here that has a <code>_firstName</code> and <code>_lastName</code>.
 Notice that we're able to specify any data type that we want! We've 
used strings for both attributes here. We could add up to 17 different 
attributes here with any data type. For now, let's keep it simple and 
only use two attributes to model the person.</p>

<p>&nbsp;</p>

<h3>Arrays</h3>

<p>Now we need a place to store this person struct. Let's use an array for this! We can declare <code>people</code> array like this:</p>

<pre><code class="hljs cpp">Person[] <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> people;</code></pre>

<p>Notice we declare the type within the array, i.e., <code>Person</code>. We also set the visibility to public and assigned it to a state variable called <code>people</code>.
 This will provide us with a function that will allow us to access the 
people inside this array. I should mention though, that calling the <code>people()</code> function outside the smart contract will not return the entire array. Instead, the <code>people()</code> function will accept an <code>index</code>
 argument that will allow us to reference the person inside the array 
based upon that index, which is zero-based. For example, we can access 
the first person in the people array like this:</p>

<pre><code class="hljs">people(0)</code></pre>

<p>Now let's create a way to add a person to this array. We'll create an <code>addPerson()</code> function like this:</p>

<pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-function">function </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">addPerson</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(</span></span><span class="hljs-built_in"><span class="hljs-function"><span class="hljs-params"><span class="hljs-built_in">string</span></span></span></span><span class="hljs-function"><span class="hljs-params"> memory _firstName, </span></span><span class="hljs-built_in"><span class="hljs-function"><span class="hljs-params"><span class="hljs-built_in">string</span></span></span></span><span class="hljs-function"><span class="hljs-params"> memory _lastName)</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span></span>{
    people.push(Person(_firstName, _lastName));
    peopleCount += <span class="hljs-number"><span class="hljs-number">1</span></span>;
}
</code></pre>

<p>This function will accept the arguments for the <code>person</code> struct attributes, then instantiate a new <code>person</code> and add it to the <code>people</code> array with the <code>push</code> function. It also increments the <code>peopleCount</code> state variable by 1. We can implement that state variable in the smart contract like this:</p>

<pre><code class="hljs cpp">uint256 <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> peopleCount;</code></pre>

<p>We'll use this value as a counter cache. Remember how I said that you can't return the entire <code>people</code> array with the <code>people()</code> function? Knowing how many <code>people</code> are inside this array will help us know how many times we must call the <code>people()</code> function to get each <code>person</code>.</p>

<p>Now the completed smart contract code should look like this:</p>

<pre><code class="hljs cpp">pragma solidity <span class="hljs-number"><span class="hljs-number">0.5</span></span><span class="hljs-number"><span class="hljs-number">.1</span></span>;

contract MyContract {
    Person[] <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> people;

    uint256 <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> peopleCount;

    <span class="hljs-class"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword">struct</span></span></span><span class="hljs-class"> </span><span class="hljs-title"><span class="hljs-class"><span class="hljs-title">Person</span></span></span><span class="hljs-class"> {</span></span>
        <span class="hljs-built_in"><span class="hljs-built_in">string</span></span> _firstName;
        <span class="hljs-built_in"><span class="hljs-built_in">string</span></span> _lastName;
    }

    <span class="hljs-function"><span class="hljs-function">function </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">addPerson</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(</span></span><span class="hljs-built_in"><span class="hljs-function"><span class="hljs-params"><span class="hljs-built_in">string</span></span></span></span><span class="hljs-function"><span class="hljs-params"> memory _firstName, </span></span><span class="hljs-built_in"><span class="hljs-function"><span class="hljs-params"><span class="hljs-built_in">string</span></span></span></span><span class="hljs-function"><span class="hljs-params"> memory _lastName)</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span></span>{
        people.push(Person(_firstName, _lastName));
        peopleCount += <span class="hljs-number"><span class="hljs-number">1</span></span>;
    }
}</code></pre>

<p>&nbsp;</p>

<h3>Mappings</h3>

<p>Solidity provides a data structure called a <code>mapping</code> 
which allows us to store key-value pairs. This structure acts much like 
an associative array or a hash table in other functions. We can declare a
 mapping in the smart contact like this:</p>

<p>mapping(uint =&gt; Person) public people;</p>

<p>This will be a mapping where we store <code>person</code> structs. It will replace the <code>people</code> array we used in the previous example. The key will be an unsigned integer, and the value will be a <code>person</code> struct. We'll treat the key like a database id. We can update the <code>person</code> struct to keep track of that id like this:</p>

<p>struct Person {
    uint _id;
    string _firstName;
    string _lastName;
}</p>

<p>Now we can modify the <code>addPerson()</code> function to update the <code>people</code> mapping like this:</p>

<pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-function">function </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">addPerson</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(</span></span><span class="hljs-built_in"><span class="hljs-function"><span class="hljs-params"><span class="hljs-built_in">string</span></span></span></span><span class="hljs-function"><span class="hljs-params"> memory _firstName, </span></span><span class="hljs-built_in"><span class="hljs-function"><span class="hljs-params"><span class="hljs-built_in">string</span></span></span></span><span class="hljs-function"><span class="hljs-params"> memory _lastName)</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span></span>{
    peopleCount += <span class="hljs-number"><span class="hljs-number">1</span></span>;
    people[peopleCount] = Person(peopleCount, _firstName, _lastName);
}</code></pre>

<p>This uses the <code>peopleCount</code> counter cache to create an id for the <code>person</code>. Then it instantiates a new <code>person</code> struct with the id and the passed in attributes. It then adds this to the <code>people</code> mapping. The completed smart contract code should look like this:</p>

<pre><code class="hljs cs">pragma solidity <span class="hljs-number"><span class="hljs-number">0.5</span></span><span class="hljs-number"><span class="hljs-number">.1</span></span>;

contract MyContract {
    uint256 peopleCount = <span class="hljs-number"><span class="hljs-number">0</span></span>;

    mapping(<span class="hljs-keyword"><span class="hljs-keyword">uint</span></span> =&gt; Person) <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> people;

    <span class="hljs-keyword"><span class="hljs-keyword">struct</span></span> Person {
        <span class="hljs-keyword"><span class="hljs-keyword">uint</span></span> _id;
        <span class="hljs-keyword"><span class="hljs-keyword">string</span></span> _firstName;
        <span class="hljs-keyword"><span class="hljs-keyword">string</span></span> _lastName;
    }

    <span class="hljs-function"><span class="hljs-function">function </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">addPerson</span></span></span><span class="hljs-function">(</span><span class="hljs-params"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">string</span></span></span></span><span class="hljs-function"><span class="hljs-params"> memory _firstName, </span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">string</span></span></span></span><span class="hljs-function"><span class="hljs-params"> memory _lastName</span></span></span><span class="hljs-function">) </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span></span>{
        peopleCount += <span class="hljs-number"><span class="hljs-number">1</span></span>;
        people[peopleCount] = Person(peopleCount, _firstName, _lastName);
    }
}</code></pre>

<p>Hooray! Now you've seen an overview of the basic data types and data structures in Solidity.</p>

<h2 id="3">#3 · Function Visibility, Modifiers &amp; Time</h2>

<div id="video-wrapper">
  <div class="embed-responsive embed-responsive-16by9">
    <iframe class="embed-responsive-item" src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/VdiPIS5JFMo.htm" allowfullscreen=""></iframe>
  </div>
</div>

<p>Now let's talk about function visibility. In the last sections, we used the <code>public</code>
 function visibility several times so that the smart contract functions 
can be called outside the smart contract by accounts connected to the 
network. What if we wanted to create functions that are only used inside
 the smart contract? We can do this with the <code>internal</code> visibility. Let's move accomplish this by the business logic that increments the <code>peopleCount</code> to its own internal function like this:</p>

<pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">function</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">incrementCount</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">internal</span></span></span><span class="hljs-function"> </span></span>{
    peopleCount += <span class="hljs-number"><span class="hljs-number">1</span></span>;
}</code></pre>

<p>This function will only be accessible inside the smart contract, not 
by the public interface for other accounts. Now we can call this 
function inside the <code>addPerson()</code> function like this:</p>

<pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-function">function </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">addPerson</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(</span></span><span class="hljs-built_in"><span class="hljs-function"><span class="hljs-params"><span class="hljs-built_in">string</span></span></span></span><span class="hljs-function"><span class="hljs-params"> memory _firstName, </span></span><span class="hljs-built_in"><span class="hljs-function"><span class="hljs-params"><span class="hljs-built_in">string</span></span></span></span><span class="hljs-function"><span class="hljs-params"> memory _lastName)</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span></span>{
    incrementCount()
    people[peopleCount] = Person(peopleCount, _firstName, _lastName);
}</code></pre>

<p>Now that's an example of other types of function visibly. Let's talk 
about function modifiers. These will allow us to add special behavior to
 our functions, like add permissions. Let's create a modifier that only 
allows an admin or "owner" to call the <code>addPerson()</code> function, and restrict everyone else from calling this function.</p>

<p>First, we'll create a way to store the owner of this smart contract. We can do that with a state variable like this:</p>

<pre><code class="hljs nginx"><span class="hljs-attribute"><span class="hljs-attribute">address</span></span> owner;</code></pre>

<p>Now let's create a modifier that checks if the person calling the function is the owner:</p>

<pre><code class="hljs coffeescript">modifier onlyOwner() {
    <span class="hljs-built_in"><span class="hljs-built_in">require</span></span>(msg.sender == owner);
    _;
}</code></pre>

<p>Let me explain this code:</p>

<ul>
    <li>First, we declare the modifier with the <code>modifier</code> keyword, followed by the modifier name <code>onlyOwner</code>.</li>
    <li>Next, we access the current account that's calling the function with <code>msg.sender</code>. Solidity provides this value inside the <code>msg</code> global variable, just like the current ether of the transaction like <code>msg.sender</code> which we saw in previous sections.</li>
    <li>Next, we use <code>require()</code> to check that the account calling the function is the owner. If the result of the expression passed into <code>require()</code> evaluates to <code>true</code>,
 then code resumes execution. If not, it throws an error. In this case, 
if the account calling the function is not the owner, then Solidity will
 throw an error.</li>
</ul>

<p>Now we can set the owner inside the smart contract as the account that deploys the smart contract like this:</p>

<pre><code class="hljs javascript"><span class="hljs-keyword"><span class="hljs-keyword">constructor</span></span>() public {
    owner = msg.sender;
}</code></pre>

<p>Now we can add the modifier to the <code>addPerson()</code> function 
so that only the owner can call it. While I'm here, I'll show you how I 
format my Solidity code once the functions start getting big, with lots 
of arguments, modifiers, visibility, etc...</p>

<pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-function">function </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">addPerson</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(
    </span></span><span class="hljs-built_in"><span class="hljs-function"><span class="hljs-params"><span class="hljs-built_in">string</span></span></span></span><span class="hljs-function"><span class="hljs-params"> memory _firstName,
    </span></span><span class="hljs-built_in"><span class="hljs-function"><span class="hljs-params"><span class="hljs-built_in">string</span></span></span></span><span class="hljs-function"><span class="hljs-params"> memory _lastName
)</span></span></span><span class="hljs-function">
    </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function">
    onlyOwner
</span></span>{
    incrementCount()
    people[peopleCount] = Person(peopleCount, _firstName, _lastName);
}</code></pre>

<p>Now try to run your code to see if only the owner can call the 
function successfully without any errors! At th is point your the 
complete smart contract code should look like this:</p>

<pre><code class="hljs cs">pragma solidity <span class="hljs-number"><span class="hljs-number">0.5</span></span><span class="hljs-number"><span class="hljs-number">.1</span></span>;

contract MyContract {
    uint256 <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> peopleCount = <span class="hljs-number"><span class="hljs-number">0</span></span>;
    mapping(<span class="hljs-keyword"><span class="hljs-keyword">uint</span></span> =&gt; Person) <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> people;

    address owner;

    <span class="hljs-function"><span class="hljs-function">modifier </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">onlyOwner</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span></span>{
        require(msg.sender == owner);
        _;
    }

    <span class="hljs-keyword"><span class="hljs-keyword">struct</span></span> Person {
        <span class="hljs-keyword"><span class="hljs-keyword">uint</span></span> _id;
        <span class="hljs-keyword"><span class="hljs-keyword">string</span></span> _firstName;
        <span class="hljs-keyword"><span class="hljs-keyword">string</span></span> _lastName;
    }

    constructor() <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> {
        owner = msg.sender;
    }

    <span class="hljs-function"><span class="hljs-function">function </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">addPerson</span></span></span><span class="hljs-function">(</span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">
        </span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">string</span></span></span></span><span class="hljs-function"><span class="hljs-params"> memory _firstName,
        </span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">string</span></span></span></span><span class="hljs-function"><span class="hljs-params"> memory _lastName
    </span></span></span><span class="hljs-function">)
        </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function">
        onlyOwner
    </span></span>{
        incrementCount()
        people[peopleCount] = Person(peopleCount, _firstName, _lastName);
    }

    <span class="hljs-function"><span class="hljs-function">function </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">incrementCount</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">internal</span></span></span><span class="hljs-function"> </span></span>{
        peopleCount += <span class="hljs-number"><span class="hljs-number">1</span></span>;
    }
}</code></pre>

<p>Now let's talk about time. We can create a new modifier that uses 
time to illustrate a use case for time in Solidity. We'll create a new 
modifier called <code>onlyWhileOpen</code> that will check that the 
current time on the blockchain is past a time that we specify. This is a
 common practice when creating ICO crowdsale smart contracts that have 
an "opening time". Often times, these smart contracts will reject 
investor contributions that are made before the crowdsale has started. 
We can model similar behavior by restricting access to the <code>addPerson()</code> function until after the opening time has passed. First let's create a state variable to store the opening time:</p>

<pre><code class="hljs nginx"><span class="hljs-attribute"><span class="hljs-attribute">uint256</span></span> startTime;</code></pre>

<p>We can store the <code>startTime</code> with this state variable in 
seconds, as that's how we express timestamps in Solidity. In fact, the 
time stamps are expressed in <a href="https://en.wikipedia.org/wiki/Unix_time" target="_blank">unix time</a>
 which is the number of seconds that have passed since Thursday, 1 
January 1970. You can read more about this time convention on <a href="https://en.wikipedia.org/wiki/Unix_time" target="_blank">Wikipedia</a>.</p>

<p>Now I'll set the start time in the constructor like this:</p>

<pre><code class="hljs javascript"><span class="hljs-keyword"><span class="hljs-keyword">constructor</span></span>() public {
    startTime = <span class="hljs-number"><span class="hljs-number">1544668513</span></span>;
}</code></pre>

<p>By the time you read this article, that timestamp will have passed. You can use <a href="https://www.epochconverter.com/" target="_blank">this website</a>
 to generate a unix timestamp in the future for your own purposes! Now 
let's create a modifier to check that the start time has passed like 
this:</p>

<pre><code class="hljs coffeescript">modifier onlyWhileOpen() {
    <span class="hljs-built_in"><span class="hljs-built_in">require</span></span>(block.timestamp &gt;= startTime);
    _;
}</code></pre>

<p>Let me explain this code:</p>

<ul>
    <li>First, we declare the modifier, just like we did in the last example.</li>
    <li>Next, we require the specific condition, just like the last example.</li>
    <li>Now, we compare the start time to "now", by checking the current block's timestamp with <code>block.timestamp</code>. This is how we get "now" in Solidity!</li>
</ul>

<p>Now we can add the modifier to the <code>addPerson()</code> function. Try to run this code and see if you can restrict the access to some time in the future! Again, you can use <a href="https://www.epochconverter.com/" target="_blank">this website</a>
 to generate a timestamp in the future. Make sure you update this value 
in the constructor function! The complete smart contract code should 
look like this:</p>

<pre><code class="hljs cs">pragma solidity <span class="hljs-number"><span class="hljs-number">0.5</span></span><span class="hljs-number"><span class="hljs-number">.1</span></span>;

contract MyContract {
    uint256 <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> peopleCount = <span class="hljs-number"><span class="hljs-number">0</span></span>;
    mapping(<span class="hljs-keyword"><span class="hljs-keyword">uint</span></span> =&gt; Person) <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> people;

    uint256 startTime;

    <span class="hljs-function"><span class="hljs-function">modifier </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">onlyWhileOpen</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span></span>{
        require(block.timestamp &gt;= startTime);
        _;
    }

    <span class="hljs-keyword"><span class="hljs-keyword">struct</span></span> Person {
        <span class="hljs-keyword"><span class="hljs-keyword">uint</span></span> _id;
        <span class="hljs-keyword"><span class="hljs-keyword">string</span></span> _firstName;
        <span class="hljs-keyword"><span class="hljs-keyword">string</span></span> _lastName;
    }

    constructor() <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> {
        startTime = <span class="hljs-number"><span class="hljs-number">1544668513</span></span>; <span class="hljs-comment"><span class="hljs-comment">// Update this value</span></span>
    }

    <span class="hljs-function"><span class="hljs-function">function </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">addPerson</span></span></span><span class="hljs-function">(</span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">
        </span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">string</span></span></span></span><span class="hljs-function"><span class="hljs-params"> memory _firstName,
        </span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">string</span></span></span></span><span class="hljs-function"><span class="hljs-params"> memory _lastName
    </span></span></span><span class="hljs-function">)
        </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function">
        onlyWhileOpen
    </span></span>{
        people[peopleCount] = Person(peopleCount, _firstName, _lastName);
    }

    <span class="hljs-function"><span class="hljs-function">function </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">incrementCount</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">internal</span></span></span><span class="hljs-function"> </span></span>{
        peopleCount += <span class="hljs-number"><span class="hljs-number">1</span></span>;
    }
}</code></pre>

<p>&nbsp;</p>

<h2 id="4">#4 · Sending Ether &amp; Events</h2>

<div id="video-wrapper">
  <div class="embed-responsive embed-responsive-16by9">
    <iframe class="embed-responsive-item" src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/BHdPZWRjtgc.htm" allowfullscreen=""></iframe>
  </div>
</div>

<p>Now let's write a function that accepts Ether. To demonstrate this, I'll create an ico-like contract with a <code>buyToken()</code>
 function. This will allow an account to send ether to pay for tokens 
with Ether. The smart contract will be responsible for issuing the 
tokens, tracking the balance of the account, and also transferring the 
Ether funds to another wallet address. Again, this is a pseudo-ico 
example. If you'd like to see a complete ICO tutorial, you can check out
 my other tutorials <a href="https://www.dappuniversity.com/articles/code-your-own-cryptocurrency-on-ethereum">Code Your Own Cryptocurrency On Ethereum</a> and <a href="https://www.dappuniversity.com/articles/real-world-ico">Real World ICO</a>.</p>

<p>First we'll create a mapping to track the token balances like this:</p>

<pre><code class="hljs javascript">mapping(<span class="hljs-function"><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">address</span></span></span><span class="hljs-function"> =&gt;</span></span> uint256) public balances;</code></pre>

<p>Now I'll create the <code>buyToken()</code> function that will increment the balance like this:</p>

<pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">function</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">buyToken</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">public</span></span></span><span class="hljs-function"> </span></span>{
    balances[msg.sender] += <span class="hljs-number"><span class="hljs-number">1</span></span>;
}</code></pre>

<p>Now I'll declare a wallet where the ether funds will be sent whenever an account buys tokens:</p>

<pre><code class="hljs nginx"><span class="hljs-attribute"><span class="hljs-attribute">address</span></span> wallet;</code></pre>

<p>Now we can transfer funds to the wallet whenever the <code>buyToken()</code> function is called like this:</p>

<pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-function">function </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">buyToken</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> payable </span></span>{
    balances[msg.sender] += <span class="hljs-number"><span class="hljs-number">1</span></span>;
    wallet.transfer(msg.<span class="hljs-keyword"><span class="hljs-keyword">value</span></span>);
}</code></pre>

<p>Now let me explain this code:</p>

<ul>
    <li>We can transfer ether directly to the wallet by calling <code>wallet.transfer()</code></li>
    <li>We can get the value of the Ether sent in by function caller with <code>msg.value</code>, just like <code>msg.sender</code></li>
    <li>We also must use the <code>payable</code> modifier so that accounts can send Ether when calling the function. </li>
</ul>

<p>Likewise, to update to Solidity 0.5.1, we must explicitly declare the wallet <code>payable</code> as well:</p>

<pre><code class="hljs nginx"><span class="hljs-attribute"><span class="hljs-attribute">address</span></span> payable wallet;</code></pre>

<p>Now let's set the wallet address inside the constructor function of the contract (we'll use the payable modifier here, too):</p>

<pre><code class="hljs javascript"><span class="hljs-keyword"><span class="hljs-keyword">constructor</span></span>(address payable _wallet) public {
    wallet = _wallet;
}</code></pre>

<p>Awesome! Now watch the video above as I demonstrate how to send Ether
 with this function inside of Remix. You complete smart contract code 
should look like this up to this point:</p>

<pre><code class="hljs javascript">contract MyContract {
    mapping(<span class="hljs-function"><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">address</span></span></span><span class="hljs-function"> =&gt;</span></span> uint256) public balances;
    address payable wallet;

    <span class="hljs-keyword"><span class="hljs-keyword">constructor</span></span>(address payable _wallet) public {
        wallet = _wallet;
    }

    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">function</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">buyToken</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">public</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">payable</span></span></span><span class="hljs-function"> </span></span>{
        balances[msg.sender] += <span class="hljs-number"><span class="hljs-number">1</span></span>;
        wallet.transfer(msg.value);
    }
}</code></pre>

<p>Now I'll show you how to create a default or "fallback" function 
inside Solidity. This is a function that will get called anytime an 
account sends Ether to a smart contract. This is a very common pattern 
for ICO smart contracts, where you simply send Ether to a smart contract
 and it executes a function. That's exactly what we'll do here. We'll 
declare a fallback function that wraps the <code>buyTokens()</code> function. It will purchase tokens any time an account sends Ether to the smart contract. We can do that like this:</p>

<pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">function</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">external</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">payable</span></span></span><span class="hljs-function"> </span></span>{
    buyToken();
}</code></pre>

<p>Awesome! Now watch the video above as I demonstrate how to send Ether to the smart contract inside Remix.</p>

<p>Now let's talk about Events. Events are a way of dealing with the 
asynchronous nature of the blockchain. We can declare events inside 
smart contracts that can be subscribed to by external consumers. These 
consumers will be able to listen for these events to know that something
 happened inside the smart contract. We'll declare a <code>Purchase</code> event at the top of the smart contract like this:</p>

<pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">event</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">Purchase</span></span></span><span class="hljs-function">(</span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">
    address _buyer,
    uint256 _amount
</span></span></span><span class="hljs-function">)</span></span>;</code></pre>

<p>This event will log the buyer and the token amount. We'll be able to trigger this event inside the <code>buyToken()</code> function like this:</p>

<pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-function">function </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">buyToken</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> payable </span></span>{
    balances[msg.sender] += <span class="hljs-number"><span class="hljs-number">1</span></span>;
    wallet.transfer(msg.<span class="hljs-keyword"><span class="hljs-keyword">value</span></span>);
    <span class="hljs-function"><span class="hljs-function">emit </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">Purchase</span></span></span><span class="hljs-function">(</span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">msg.sender, </span></span><span class="hljs-number"><span class="hljs-function"><span class="hljs-params"><span class="hljs-number">1</span></span></span></span></span><span class="hljs-function">)</span></span>;
}</code></pre>

<p>This event will allow us to know any time a token is purchased inside
 this smart contract. But what if we only wanted to listen for events 
that were relevant to our account? Good news! Solidity allows us to 
subscribe to filter events by indexed values. We can index the <code>_buyer</code> inside the event like this:</p>

<pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">event</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">Purchase</span></span></span><span class="hljs-function">(</span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">
    address indexed _buyer,
    uint256 _amount
</span></span></span><span class="hljs-function">)</span></span>;</code></pre>

<p>Awesome! Now you know how to work with events inside Solidity. At 
this point your complete smart contract code should look like this:</p>

<pre><code class="hljs javascript">contract MyContract {
    mapping(<span class="hljs-function"><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">address</span></span></span><span class="hljs-function"> =&gt;</span></span> uint256) public balances

    event Purchase(
        address indexed _buyer,
        uint256 _amount
    );

    <span class="hljs-keyword"><span class="hljs-keyword">constructor</span></span>(address payable _wallet) public {
        wallet = _wallet;
    }

    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">function</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">external</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">payable</span></span></span><span class="hljs-function"> </span></span>{
        buyToken();
    }

    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">function</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">buyToken</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">public</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">payable</span></span></span><span class="hljs-function"> </span></span>{
        balances[msg.sender] += <span class="hljs-number"><span class="hljs-number">1</span></span>;
        wallet.transfer(msg.value);
        emit Purchase(msg.sender, <span class="hljs-number"><span class="hljs-number">1</span></span>);
    }
}</code></pre>

<p>You can watch the video above to learn how to inspect transaction receipts to see the values returned by events.</p>

<p>Lastly, I'll say a few common use cases for using events in Solidity.
 First is to listen for them directly, just as I mentioned before. It's 
common to call a smart contract function, and then wait for an event to 
trigger to know that the function call completed. Secondly, you can get 
the entire event stream from a smart contract, i.e., every event that 
was triggered by it. It's a really nice way to get the entire history of
 a function call inside Solidity. I actually show you how to do this in <a href="https://www.dappuniversity.com/articles/web3-js-intro">my series on Web3.js</a>! You can check that out for more info.</p>

<h2 id="5">#5 · Smart Contract Interaction &amp; Inheritance</h2>

<div id="video-wrapper">
  <div class="embed-responsive embed-responsive-16by9">
    <iframe class="embed-responsive-item" src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/on3SZ-BAFw8.htm" allowfullscreen=""></iframe>
  </div>
</div>

<p>Now I'll show you how to work with multiple smart contracts in 
solidity. First, I'll show you how to call smart contract functions from
 within another smart contract. Then, I'll show you how to inherit 
behavior from a parent smart contract within a child smart contract.</p>

<p>First I'll refactor the code from the previous example to create a token smart contract that's separate from <code>MyContract</code>
 code. This will be a pseudo ERC20 token, which will not contain all the
 functionality of a real ERC-20 smart contract. You can check out <a href="https://www.dappuniversity.com/articles/code-your-own-cryptocurrency-on-ethereum">my other tutorial</a> that shows you how to do that. For now, I'll create the token contract like this:</p>

<pre><code class="hljs javascript">contract ERC20Token {
    string name;
    mapping(<span class="hljs-function"><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">address</span></span></span><span class="hljs-function"> =&gt;</span></span> uint256) public balances;

    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">function</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">mint</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">public</span></span></span><span class="hljs-function"> </span></span>{
        balances[msg.sender] += <span class="hljs-number"><span class="hljs-number">1</span></span>;
    }
}
</code></pre>

<p>This moves the <code>mint()</code> function, <code>name</code>, and <code>balances</code> mapping to the token contract since that's where these responsibilities should lie. Now we can mint tokens from <code>MyContract</code> using the <code>ERC20Token</code>
 contract. In order to do this, we need to a few things: the address of 
the token, and the smart contract code in order to call its <code>mint()</code> function. First I'll store the token address in a state variable like this:</p>

<code><pre>contract MyContract {
    address public token;
    //...
}</pre></code>

<p>Now we can set the value for the token address inside the constructor like this:</p>

<pre><code class="hljs javascript"><span class="hljs-keyword"><span class="hljs-keyword">constructor</span></span>(address payable _wallet, ERC20Token _token) public {
    wallet = _wallet;
    token = _token;
}</code></pre>

<p>Now that we have the address available, we can access the smart contract code inside of the <code>buyToken()</code> function like this, and call the <code>mint()</code> function on it like this:</p>

<pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-function">function </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">buyToken</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> payable </span></span>{
    ERC20Token _token = ERC20Token(address(token));
    _token.mint();
    wallet.transfer(msg.<span class="hljs-keyword"><span class="hljs-keyword">value</span></span>);
}
</code></pre>

<p>I want to draw your attention to something before we continue. If you were to call the <code>buyToken()</code> function from your personal account right now, you would not mint any tokens for yourself. Why is that!? Let's revisit the <code>mint()</code> function as it is now:</p>

<pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">function</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">mint</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">public</span></span></span><span class="hljs-function"> </span></span>{
    balances[msg.sender] += <span class="hljs-number"><span class="hljs-number">1</span></span>;
}</code></pre>

<p>The reason it will not mint tokens for your account is because <code>msg.sender</code> is actually referencing the address of <code>MyContract</code>, which is calling the function from inside its <code>buyToken()</code>function! If we want to mint tokens for our own account, we must use <code>tx.origin</code> to reference the account that originated the transaction on the blockchain like this:</p>

<pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">function</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">mint</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">public</span></span></span><span class="hljs-function"> </span></span>{
    balances[tx.origin] += <span class="hljs-number"><span class="hljs-number">1</span></span>;
}</code></pre>

<p>There you go! Now you can mint tokens from another smart contract! 
Watch the video to see how to run this demonstration inside Remix. You 
will need to deploy the token smart contract first, obtain its address, 
and then include it as an argument whenever you deploy the second smart 
contract. At this point your complete smart contract code should look 
like this:</p>

<pre><code class="hljs javascript">pragma solidity <span class="hljs-number"><span class="hljs-number">0.5</span></span><span class="hljs-number"><span class="hljs-number">.1</span></span>;

contract ERC20Token {
    string name;
    mapping(<span class="hljs-function"><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">address</span></span></span><span class="hljs-function"> =&gt;</span></span> uint256) public balances;

    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">function</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">mint</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">public</span></span></span><span class="hljs-function"> </span></span>{
        balances[tx.origin] += <span class="hljs-number"><span class="hljs-number">1</span></span>;
    }
}

contract MyContract {
    address public token;

    address payable wallet;

    <span class="hljs-keyword"><span class="hljs-keyword">constructor</span></span>(address payable _wallet, address _token) public {
        wallet = _wallet;
        token = _token;
    }

    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">function</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">buyToken</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">public</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">payable</span></span></span><span class="hljs-function"> </span></span>{
        ERC20Token _token = ERC20Token(address(token));
        _token.mint();
        wallet.transfer(msg.value);
    }
}</code></pre>

<p>Now I'll show you other ways to reference the token smart contract. We can use a one-lie expression like this:</p>

<pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-function">function </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">buyToken</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> payable </span></span>{
    ERC20Token(address(token)).mint();
    wallet.transfer(msg.<span class="hljs-keyword"><span class="hljs-keyword">value</span></span>);
}</code></pre>

<p>We can also refactor the code to store the token in a state variable like this:</p>

<code><pre>contract MyContract {
    ERC20Token public token;
    //...
}</pre></code>

<p>Then, we can simply call the mint function like this:</p>

<pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-function">function </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">buyToken</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> payable </span></span>{
    token.mint();
    wallet.transfer(msg.<span class="hljs-keyword"><span class="hljs-keyword">value</span></span>);
}</code></pre>

<p>Now let's talk about inheritance. Solidity allows you to create smart
 contracts that inherit from one another. Let's create a new pseudo 
token called <code>MyToken</code> that inherits from our original token 
smart contract. We'll use inheritance to give it a unique name, symbol, 
and mint function. We can inherit from the smart contract like this:</p>

<pre><code class="hljs cs">contract MyToken <span class="hljs-keyword"><span class="hljs-keyword">is</span></span> ERC20Token {
    <span class="hljs-comment"><span class="hljs-comment">// ...</span></span>

}</code></pre>

<p>Now we can keep track of the token name in the parent smart contract like this:</p>

<pre><code class="hljs cpp">pragma solidity <span class="hljs-number"><span class="hljs-number">0.5</span></span><span class="hljs-number"><span class="hljs-number">.1</span></span>;

contract ERC20Token {
    <span class="hljs-built_in"><span class="hljs-built_in">string</span></span> <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> name;
    mapping(address =&gt; uint256) <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> balances;

    constructor(<span class="hljs-built_in"><span class="hljs-built_in">string</span></span> memory _name) <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> {
        name = _name;
    }

    <span class="hljs-function"><span class="hljs-function">function </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">mint</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span></span>{
        balances[tx.origin] ++;
    }
}</code></pre>

<p>We can override the name of the parent token inside the constructor 
of our child token. While we're here, we'll also create a symbol for the
 child token and set it in the constructor. I'll show you how to 
override the parent token contract constructor, while assigning the new 
values like this:</p>

<pre><code class="hljs cs">contract MyToken <span class="hljs-keyword"><span class="hljs-keyword">is</span></span> ERC20Token {
    <span class="hljs-keyword"><span class="hljs-keyword">string</span></span> <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> symbol;

    constructor(
        <span class="hljs-keyword"><span class="hljs-keyword">string</span></span> memory _name,
        <span class="hljs-keyword"><span class="hljs-keyword">string</span></span> memory _symbol
    )
        ERC20Token(_name)
    <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> {
        symbol = _symbol;
    }
}</code></pre>

<p>Awesome! Now we have customized <code>MyToken</code>. Now let's update the <code>mint()</code>
 function to override the functionality of the parent token. First, 
let's create a way to store the address of all the token owners. We'll 
also set the count of all the owners like this:</p>

<pre><code class="hljs cs">contract MyToken <span class="hljs-keyword"><span class="hljs-keyword">is</span></span> ERC20Token {
    address[] <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> owners;
    uint256 <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> ownerCount;
    <span class="hljs-comment"><span class="hljs-comment">//...</span></span>
}
</code></pre>

<p>Now let's update these values inside our own <code>mint()</code> function while preserving the behavior of the parent token smart contract. We can do that with the <code>super</code> keyword like this:</p>

<pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">function</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">mint</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">public</span></span></span><span class="hljs-function"> </span></span>{
    <span class="hljs-keyword"><span class="hljs-keyword">super</span></span>.mint();
    ownerCount ++;
    owners.push(msg.sender);
}
</code></pre>

<p>Awesome! Now we've created our own custom token that inherits from 
the parent token. Your full smart contract code should look like this:</p>

<pre><code class="hljs cs">pragma solidity <span class="hljs-number"><span class="hljs-number">0.5</span></span><span class="hljs-number"><span class="hljs-number">.1</span></span>;

contract ERC20Token {
    <span class="hljs-keyword"><span class="hljs-keyword">string</span></span> <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> name;
    mapping(address =&gt; uint256) <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> balances;

    constructor(<span class="hljs-keyword"><span class="hljs-keyword">string</span></span> memory _name) <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> {
        name = _name;
    }

    <span class="hljs-function"><span class="hljs-function">function </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">mint</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span></span>{
        balances[tx.origin] ++;
    }
}

contract MyToken <span class="hljs-keyword"><span class="hljs-keyword">is</span></span> ERC20Token {
    <span class="hljs-keyword"><span class="hljs-keyword">string</span></span> <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> symbol;
    address[] <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> owners;
    uint256 <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> ownerCount;

    constructor(
        <span class="hljs-keyword"><span class="hljs-keyword">string</span></span> memory _name,
        <span class="hljs-keyword"><span class="hljs-keyword">string</span></span> memory _symbol
    )
        ERC20Token(_name)
    <span class="hljs-keyword"><span class="hljs-keyword">public</span></span> {
        symbol = _symbol;
    }

    <span class="hljs-function"><span class="hljs-function">function </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">mint</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span></span>{
        super.mint();
        ownerCount ++;
        owners.push(msg.sender);
    }

}</code></pre>

<p>Yay!!! 🎉 That wraps up the step-by-step article for now. Be sure to 
subscribe to my youtube channel because I plan to release more videos in
 this series so that you can continue to learn Solidity! Also be sure to
 <a href="https://www.dappuniversity.com/free-download">SIGN UP FOR MY EMAIL LIST</a> to learn about critical updates, including the release of new articles and Solidity videos. 😀</p>

          <p>Happy with this tutorial? Then you <strong>NEED</strong> to <a href="https://www.dappuniversity.com/bootcamp">join my free training here</a> where I'll show you how to build a real world blockchain app so that you can become a highly paid blockchain developer!</p>
      </section>
    </main>
    <nav class="col-md-3 d-none d-md-block bg-light sidebar sidebar-nav">
  <div class="sidebar-sticky">
    <img class="img-fluid" style="width: 200px; border-radius: 200px;" src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/avatar-af25085c0879a503dd82590d88ee4a79948e777e391c6db37054a.jpg" alt="Avatar">
    <p></p>
    <h3>Meet Your Instructor</h3>
    <p>👋 Hey there, welcome to Dapp University! Check out this list of awesome tutorials below. <br>
    -- Gregory</p>
      <!--       <h6 class="sidebar-heading">
        <span>Tutorials</span>
        <a class="d-flex align-items-center text-muted" href="#">
          <span data-feather="plus-circle"></span>
        </a>
      </h6> -->
      <ol class="nav flex-column mb-2">
          <li class="nav-item">
            <a href="https://www.dappuniversity.com/articles/blockchain-app-tutorial">1. How To Build Blockchain App</a>
          </li>
          <li class="nav-item">
            <a href="https://www.dappuniversity.com/articles/the-ultimate-ethereum-dapp-tutorial">2. Ultimate Ethereum Dapp Tutorial</a>
          </li>
          <li class="nav-item">
            <a href="https://www.dappuniversity.com/articles/code-your-own-cryptocurrency-on-ethereum">3. Code Your Own Cryptocurrency</a>
          </li>
          <li class="nav-item">
            <a href="https://www.dappuniversity.com/articles/web3-js-intro">4. Intro to Web3.js</a>
          </li>
          <li class="nav-item">
            <a href="https://www.dappuniversity.com/articles/how-to-build-a-blockchain-app">5. How To Build A Blockchain App</a>
          </li>
          <li class="nav-item">
            <a href="https://www.dappuniversity.com/articles/solidity-tutorial">6. Solidity for Beginners</a>
          </li>
          <li class="nav-item">
            <a href="https://www.dappuniversity.com/articles/ethereum-dapp-react-tutorial">7. Ethereum Dapp + React.js</a>
          </li>
          <li class="nav-item">
            <a href="https://www.dappuniversity.com/articles/web3-py-intro">8. Intro to Web3.py</a>
          </li>
          <li class="nav-item">
            <a href="https://www.dappuniversity.com/articles/blockchain-developer-toolkit">9. Complete Blockchain Developer Toolkit</a>
          </li>
          <li class="nav-item">
            <a href="https://www.dappuniversity.com/articles/the-complete-blockchain-developer-resource-list">10. Complete Blockchain Developer Resource List</a>
          </li>
          <li class="nav-item">
            <a href="https://www.dappuniversity.com/articles/real-world-ico">11. Real World ICO</a>
          </li>
          <li class="nav-item">
            <a href="https://www.dappuniversity.com/articles/how-to-learn-blockchain-programming">12. The Best Way To Learn Blockchain Programming</a>
          </li>
          <li class="nav-item">
            <a href="https://www.dappuniversity.com/articles/build-a-blockchain-explorer-with-quiknode">13. Build a Blockchain Explorer</a>
          </li>
      </ol>

  </div>
</nav>

  </div>
</div>

<!-- Scroll Button -->
<!-- https://codepen.io/michalwyrwa/pen/GBaPPj -->
<a id="back-to-top" href="#" class="btn btn-primary btn-lg back-to-top" role="button" style="display: block;"><img class="" src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/up-arrow.svg" width="20"></a>

      <div id="footer" class="container-fluid">
  <ul class="list-inline text-center">
    <li class="list-inline-item">
      <a target="_blank" class="nav-link social-icon" href="https://www.youtube.com/c/DappUniversity">
        <i class="fa fa-youtube-square fa-3x"></i>
</a>    </li>
    <li class="list-inline-item">
      <a target="_blank" class="nav-link social-icon" href="https://www.twitter.com/DappUniversity">
        <i class="fa fa-twitter fa-3x"></i>
</a>    </li>
    <li class="list-inline-item">
      <a target="_blank" class="nav-link social-icon" href="https://www.github.com/dappuniversity">
        <i class="fa fa-github fa-3x"></i>
</a>    </li>

    <li class="list-inline-item">
      <a class="nav-link social-icon" href="mailto:gregory@dappuniversity.com?body=Hi%20there%2C%20I%20was%20browsing%20your%20website%20and%20wanted%20to%20connect.&amp;subject=dappuniveristy.com">
        <i class="fa fa-envelope fa-3x"></i>
</a>    </li>

  </ul>
  <p class="text-center">© 2020 <a href="https://www.dappuniversity.com/">Dapp University</a>. All rights reserved.</p>
</div>

      <!-- The Modal -->
<div class="modal fade" id="optInModal" style="display: none;" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <!-- Begin Form -->
      <form id="emailSignUpForm" action="/bootcamp_sign_ups" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="✓"><input type="hidden" name="authenticity_token" value="cAZkLD4/1noXFG/LARZ8Co9id0/2AGiIxAN+vzQRMuvY5hlrEfm0Duly96bLHcNoBquqauZ78NCCSTuivsyEdw==">
        <!-- Modal body -->
        <div class="modal-body">
          <img class="img-fluid" src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/bootcamp-promo-be539d1f9676a0fae2f0d4ae846a7394ebf2252bed207.png" alt="Bootcamp promo">
          <div class="form-group">
            <input class="form-control" placeholder="Enter Email" required="required" style="border: 1px solid #969696; margin-top: 10px; padding-left: 10px;" type="email" name="bootcamp_sign_up[email]" id="bootcamp_sign_up_email">
            <small id="emailHelp" class="form-text text-muted text-center">I'll never share your email with anyone else. No spam, ever!</small>
          </div>
          <input type="submit" name="commit" value="Sign Up Free!" class="btn btn-primary btn-block" style="background-color: #1AC203; border-color: #1AC203; font-weight: bold; font-size: 18px;" data-disable-with="Sign Up Free!">
          <div class="text-center">
            <small id="emailHelp" class="form-text text-muted"><a class="nav-link" href="https://www.dappuniversity.com/bootcamp">Learn More</a></small>
          </div>
      <!-- End Form -->
    </div></form>
  </div>
</div>

    </div>
<!--     <script type="text/javascript">
      console.log("loading crisp chat...")
      window.$crisp=[];window.CRISP_WEBSITE_ID="2de5f73e-4c89-4e4d-a0eb-e3fd5c480502";(function(){d=document;s=d.createElement("script");s.src="https://client.crisp.chat/l.js";s.async=1;d.getElementsByTagName("head")[0].appendChild(s);})();
    </script> -->
  

</div><div id="cta40233" style="display: none; position: fixed; top: 0px; left: 0px; width: 100%; height: 100%; overflow-y: auto; z-index: 100001; opacity: 0; background: rgba(15, 21, 33, 0.89) none repeat scroll 0% 0%;" class="convertflow-cta cf-overlay"><div data-cta="40233" class="cf-cta-close" style="position: fixed; right: 3%; top: 3%; padding: 0px; width: 28px; height: 28px; border-radius: 20px; text-align: center; line-height: 24px; font-size: 18px; font-family: Verdana, Arial, San-serif; cursor: pointer; z-index: 99999; box-shadow: rgba(0, 0, 0, 0.2) 0px 3px 50px 0px; background: rgb(255, 255, 255) none repeat scroll 0% 0%; color: rgb(137, 148, 176);">x</div><div id="cta_40233" class="cf-cta-inner cf-overlay-boxed cf-has-transitions cf-is-hidden" style="position: absolute; margin: 4% auto; cursor: initial; z-index: 99998; left: 0px; right: 0px; max-width: 500px;">
  <div class="cf-container cf-row cf-outer-center">
      <div class="cf-step" step-id="108212" id="step_108212" style="display: block !important;">
  <div id="cta40233-step1" class="step-inner">
    <div id="cta40233-step1-inner-container" class="cf-cta-container cf-row cf-outer-center">
        <div id="section252304" class="cf-row cf-section cf-outer-center   cf-background-position-top-center cf-background-size-cover" section-id="252304" data-pos="1" step-id="108212" element-id="" style="position: relative; 
  ">

  <div section-id="252304" class="cf-video-background-container">
  </div>
  <div id="section252304-overlay" section-id="252304" class="section-overlay" style="background-color: #1a2133; opacity: 0;"></div>
    <div section-id="252304" class="cf-section-container cf-row cf-outer-center              " data-padding-top="" data-padding-bottom="" data-padding-left="" data-padding-right="">

      <div column-position="first" id="section252304-column-first" section-id="252304" data-column="cf-col-md-12" vertical-padding="" horizontal-padding="" data-padding-top="cf-top-padding_0" data-padding-bottom="cf-bottom-padding_0" data-padding-left="cf-left-padding_0" data-padding-right="cf-right-padding_0" style="
        border: initial !important; border-style: solid !important; border-width: 0px !important; border-color:  !important;
        " class="cf-col cf-column cf-column-first   cf-col-md-12  cf-top-padding_0 cf-mobile-top-padding_0  cf-bottom-padding_0 cf-mobile-bottom-padding_0  cf-left-padding_0 cf-mobile-left-padding_0  cf-right-padding_0 cf-mobile-right-padding_0    cf-background-position-top-center cf-background-size-cover">

        <div id="section252304-first-overlay" section-id="252304" class="background-overlay" style="background-color: rgb(0, 0, 0); opacity: 0;"></div>
        
        <div class="cf-cta-item-container" section-id="252304" data-sortable-id="1">
          <div class="cf-cta-item disabled-item"></div>
            <div id="element729186" data-id="729186" data-type="row" section-id="252304" class="cf-cta-item cf-element fr-view              " cf-alignment="" cf-vspace="" sortable-id="1" data-pos="1">


      <div id="section252305" class="cf-row cf-section cf-outer-center   cf-background-position-top-center cf-background-size-cover" section-id="252305" data-pos="1" step-id="108212" element-id="729186" style="position: relative; 
  ">

  <div section-id="252305" class="cf-video-background-container">
  </div>
  <div id="section252305-overlay" section-id="252305" class="section-overlay" style="background-color: rgb(255, 255, 255); opacity: 1;"></div>
    <div section-id="252305" class="cf-section-container cf-row cf-outer-center              " data-padding-top="" data-padding-bottom="" data-padding-left="" data-padding-right="">

      <div column-position="first" id="section252305-column-first" section-id="252305" data-column="cf-col-md-12" vertical-padding="" horizontal-padding="" data-padding-top="cf-top-padding_2" data-padding-bottom="cf-bottom-padding_2" data-padding-left="cf-left-padding_0" data-padding-right="cf-right-padding_0" style="
        border: initial !important; border-style: solid !important; border-width: 0px !important; border-color:  !important;
        " class="cf-col cf-column cf-column-first   cf-col-md-12  cf-top-padding_2   cf-bottom-padding_2   cf-left-padding_0   cf-right-padding_0     cf-background-position-top-center cf-background-size-cover">

        <div id="section252305-first-overlay" section-id="252305" class="background-overlay" style="background-color: #FFFFFF; opacity: 0;"></div>
        
        <div class="cf-cta-item-container" section-id="252305" data-sortable-id="1">
          <div class="cf-cta-item disabled-item"></div>
            <div id="element729187" data-id="729187" data-type="row" section-id="252305" class="cf-cta-item cf-element fr-view              " cf-alignment="" cf-vspace="" sortable-id="1" data-pos="1">


      <div id="section252306" class="cf-row cf-section cf-outer-center   cf-background-position-top-center cf-background-size-cover" section-id="252306" data-pos="1" step-id="108212" element-id="729187" style="position: relative; 
  ">

  <div section-id="252306" class="cf-video-background-container">
  </div>
  <div id="section252306-overlay" section-id="252306" class="section-overlay" style="background-color: rgb(255, 255, 255); opacity: 0;"></div>
    <div section-id="252306" class="cf-section-container cf-row cf-outer-center              " data-padding-top="" data-padding-bottom="" data-padding-left="" data-padding-right="">

      <div column-position="first" id="section252306-column-first" section-id="252306" data-column="cf-col-md-12" vertical-padding="" horizontal-padding="" data-padding-top="cf-top-padding_0" data-padding-bottom="cf-bottom-padding_0" data-padding-left="cf-left-padding_0" data-padding-right="cf-right-padding_0" style="
        border: initial !important; border-style: solid !important; border-width: 0px !important; border-color: #1a2133 !important;
        " class="cf-col cf-column cf-column-first   cf-col-md-12  cf-top-padding_0   cf-bottom-padding_0   cf-left-padding_0 cf-mobile-left-padding_1  cf-right-padding_0 cf-mobile-right-padding_1    cf-background-position-top-center cf-background-size-cover">

        <div id="section252306-first-overlay" section-id="252306" class="background-overlay" style="background-color: #FFFFFF; opacity: 0;"></div>
        
        <div class="cf-cta-item-container" section-id="252306" data-sortable-id="1">
          <div class="cf-cta-item disabled-item"></div>
            <div id="element729189" data-id="729189" data-type="headline" section-id="252306" class="cf-cta-item cf-element fr-view cf-center  cf-little-vspace           " cf-alignment="cf-center" cf-vspace="cf-little-vspace" sortable-id="1" data-pos="1">


    <div id="element729189-content" class="element-content cf-text-element">
      <h1><span style="color: rgb(0, 0, 0); font-family: Roboto, sans-serif;"><strong class="">JOIN THE LAUNCH EVENT</strong></span></h1>
    </div>

</div>

            <div id="element729190" data-id="729190" data-type="text" section-id="252306" class="cf-cta-item cf-element fr-view cf-center  cf-little-vspace    cf-left-padding_3 cf-mobile-left-padding_0 cf-right-padding_3 cf-mobile-right-padding_0    " cf-alignment="cf-center" cf-vspace="cf-little-vspace" sortable-id="1" data-pos="2">


    <div id="element729190-content" class="element-content cf-text-element">
      <h3><span style="color: rgb(0, 0, 0); font-family: Lato, sans-serif;">Enter your email to join now.</span></h3>
    </div>

</div>

            <div id="element729191" data-id="729191" data-type="form" section-id="252306" class="cf-cta-item cf-element fr-view cf-outer-center  cf-little-vspace  cf-top-padding_1   cf-mobile-left-padding_1  cf-mobile-right-padding_1    " cf-alignment="cf-outer-center" cf-vspace="cf-little-vspace" sortable-id="1" data-pos="3">


    <div id="element729191-content" class="element-content cf-form">
      <div id="element729191_form" class="cf-form cf-form-2 cf-form-theme-default cf-form-vertical cf-outer-center cf-form-small cf-field-large cf-field-slightly-rounded" style="font-family: Roboto !important;" data-consent="false" data-visible-fields="1">
  
  <form accept-charset="UTF-8" element-id="729191" data-remote="true" class="new_contact" method="post" novalidate="novalidate" action="">
    <!-- hidden fields -->
    <input type="hidden" id="form729191-visitor" name="contact[visitor_token]" value="4a94fdf5-ecb5-4f31-93b6-0f5a854ad880">
    <input type="hidden" name="contact[contactable_type]" value="Cta">
    <input type="hidden" name="contact[contactable_id]" value="40233">
    <input type="hidden" name="contact[website_id]" value="9054">
    <input type="hidden" name="contact[element_id]" value="729191">
    <input type="hidden" name="contact[source_url]" value="dappuniversity.com/articles/solidity-tutorial">
    <input type="hidden" id="form729191-flow-id" name="contact[flow_id]" value="">
    <input type="hidden" id="form729191-stage-id" name="contact[stage_id]" value="">
    <input type="hidden" id="form729191-goal-id" name="contact[goal_id]" value="">
    <input type="hidden" id="form729191-broadcast-id" name="contact[broadcast_id]" value="">
    <input type="hidden" id="form729191-variant-id" name="contact[variant_id]" value="52206">


    <!-- contact fields -->
    <div class="cf-form-fields">

      <!-- preset fields -->
        
        
        
        
        
        
        
        
        
        
        
        

      <!-- custom fields -->

    <div class="cf-form-field" data-pos="1" data-field="name" data-visible="" style="order: 1" "="">
          <p class="cf-label" style="color: #0A61FF !important; display: none !important;">
            
          </p>

          <input type="text" name="contact[name]" placeholder="First name">

        </div><div class="cf-form-field" data-pos="2" data-field="lastname" data-visible="" style="order: 2" "="">
          <p class="cf-label" style="color: #0A61FF !important; display: none !important;">
            
          </p>

          <input type="text" name="contact[last_name]" placeholder="Last name">

        </div><div class="cf-form-field" data-pos="3" data-field="email" data-visible="true" style="order: 3" "="">
          <p class="cf-label" style="color: #0A61FF !important; display: none !important;">
            
          </p>

          <input type="email" name="contact[email]" placeholder="email@website.com" required="" aria-required="true">

            <div class="cf-tooltip cf-top cf-validation-tooltip" style="display: none !important;">
              <div class="cf-tooltip-arrow" style="border-top-color: #27ae60;"></div>
              <div class="cf-tooltip-inner" style="background-color: #27ae60;">
                Email validated!
              </div>
            </div>
            <img class="cf-email-validation" src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/loader.webp">
        </div><div class="cf-form-field" data-pos="4" data-field="phone" data-visible="" style="order: 4" "="">
          <p class="cf-label" style="color: #0A61FF !important; display: none !important;">
            
          </p>

          <input type="tel" name="contact[phone]" placeholder="Your phone number">

        </div><div class="cf-form-field" data-pos="5" data-field="url" data-visible="" style="order: 5" "="">
          <p class="cf-label" style="color: #0A61FF !important; display: none !important;">
            
          </p>

          <input type="text" name="contact[url]" placeholder="Your website URL">

        </div><div class="cf-form-field" data-pos="6" data-field="company-name" data-visible="" style="order: 6" "="">
          <p class="cf-label" style="color: #0A61FF !important; display: none !important;">
            
          </p>

          <input type="text" name="contact[company_name]" placeholder="Your company name">

        </div><div class="cf-form-field" data-pos="7" data-field="company-title" data-visible="" style="order: 7" "="">
          <p class="cf-label" style="color: #0A61FF !important; display: none !important;">
            
          </p>

          <input type="text" name="contact[company_title]" placeholder="Your professional title">

        </div><div class="cf-form-field" data-pos="8" data-field="city" data-visible="" style="order: 8" "="">
          <p class="cf-label" style="color: #0A61FF !important; display: none !important;">
            
          </p>

          <input type="text" name="contact[city]" placeholder="Your city" value="Mumbai">

        </div><div class="cf-form-field" data-pos="9" data-field="state" data-visible="" style="order: 9" "="">
          <p class="cf-label" style="color: #0A61FF !important; display: none !important;">
            
          </p>

          <input type="text" name="contact[state]" placeholder="Your state" value="Maharashtra">

        </div><div class="cf-form-field" data-pos="10" data-field="country" data-visible="" style="order: 10" "="">
          <p class="cf-label" style="color: #0A61FF !important; display: none !important;">
            
          </p>

          <input type="text" name="contact[country]" placeholder="Your country" value="India">

        </div><div class="cf-form-field" data-pos="11" data-field="address" data-visible="" style="order: 11" "="">
          <p class="cf-label" style="color: #0A61FF !important; display: none !important;">
            
          </p>

          <input type="text" name="contact[address]" placeholder="Your address">

        </div><div class="cf-form-field" data-pos="12" data-field="zip-code" data-visible="" style="order: 12" "="">
          <p class="cf-label" style="color: #0A61FF !important; display: none !important;">
            
          </p>

          <input type="text" name="contact[zip_code]" placeholder="Your zip code" value="400070">

        </div></div>

    <!-- consent checkboxes -->
    <div class="cf-form-consent">
      <div class="cf-consent-field cf-privacy-consent cf-left" style="display: none;">
        <label class="cf-label" style="color: #0A61FF;">
          <input type="checkbox" class="cf-consent-checkbox" name="contact[privacy_consent]">
          <span class="cf-consent-label">
            <span class="cf-privacy-message">
              Accept privacy policy and terms of service
            </span>
            <a class="cf-privacy-link" href="#" target="_blank" style="display: none; font-family: inherit !important; color: inherit !important; text-decoration: underline !important; opacity: 0.7 !important;"><br>Privacy Policy</a>&nbsp;&nbsp;
            <a class="cf-terms-link" href="#" target="_blank" style="display: none; font-family: inherit !important; color: inherit !important; text-decoration: underline !important; opacity: 0.7 !important;">Terms of Service</a>
          </span>
        </label>
      </div>

      <div class="cf-consent-field cf-marketing-consent cf-left" style="display: none;">
        <label class="cf-label" style="color: #0A61FF;">
          <input type="checkbox" class="cf-consent-checkbox" name="contact[marketing_consent]">
          <span class="cf-consent-label">
            <span class="cf-marketing-label">Yes, I'd like to receive email communications</span>
          </span>
        </label>
      </div>
    </div>

    <!-- form button -->
    <div class="cf-form-button">
      <div class="cf-button-outer cf-full-width cf-outer-center cf-slightly-rounded">
        <button name="commit" type="submit" class="cf-button cf-button-primary cf-button-small cf-full-width" style="background: #0A61FF !important; color: rgb(255, 255, 255) !important; border: initial !important; border-width: 2px !important; border-color: #0A61FF !important; border-style: solid !important;">
          <div class="cf-text-element cf-button" style="font-family: Roboto !important;">
            <p>JOIN NOW &nbsp;→</p>
          </div>
        </button>
      </div>
    </div>

  </form>

</div>
    </div>

</div>

        </div>


      </div>
      <div column-position="second" id="section252306-column-second" section-id="252306" data-column="cf-col-md-12" vertical-padding="" horizontal-padding="" data-padding-top="cf-top-padding_2" data-padding-bottom="cf-bottom-padding_2" data-padding-left="cf-left-padding_2" data-padding-right="cf-right-padding_2" style="
          display: none;
        border: initial !important; border-style: solid !important; border-width: 0px !important; border-color:  !important;
        " class="cf-col cf-column cf-column-second   cf-col-md-12  cf-top-padding_2   cf-bottom-padding_2   cf-left-padding_2   cf-right-padding_2     cf-background-position-top-center cf-background-size-cover">

        <div id="section252306-second-overlay" section-id="252306" class="background-overlay" style="background-color: rgb(0, 0, 0); opacity: 0;"></div>
        
        <div class="cf-cta-item-container" section-id="252306" data-sortable-id="2">
          <div class="cf-cta-item disabled-item"></div>
        </div>


      </div>
      <div column-position="third" id="section252306-column-third" section-id="252306" data-column="cf-col-md-12" vertical-padding="" horizontal-padding="" data-padding-top="cf-top-padding_2" data-padding-bottom="cf-bottom-padding_2" data-padding-left="cf-left-padding_2" data-padding-right="cf-right-padding_2" style="
          display: none;
        border: initial !important; border-style: solid !important; border-width: 0px !important; border-color:  !important;
        " class="cf-col cf-column cf-column-third   cf-col-md-12  cf-top-padding_2   cf-bottom-padding_2   cf-left-padding_2   cf-right-padding_2     cf-background-position-top-center cf-background-size-cover">

        <div id="section252306-third-overlay" section-id="252306" class="background-overlay" style="background-color: rgb(0, 0, 0); opacity: 0;"></div>
        
        <div class="cf-cta-item-container" section-id="252306" data-sortable-id="3">
          <div class="cf-cta-item disabled-item"></div>
        </div>


      </div>
      <div column-position="fourth" id="section252306-column-fourth" section-id="252306" data-column="cf-col-md-12" vertical-padding="" horizontal-padding="" data-padding-top="cf-top-padding_2" data-padding-bottom="cf-bottom-padding_2" data-padding-left="cf-left-padding_2" data-padding-right="cf-right-padding_2" style="
          display: none;
        border: initial !important; border-style: solid !important; border-width: 0px !important; border-color:  !important;
        " class="cf-col cf-column cf-column-fourth   cf-col-md-12  cf-top-padding_2   cf-bottom-padding_2   cf-left-padding_2   cf-right-padding_2     cf-background-position-top-center cf-background-size-cover">

        <div id="section252306-fourth-overlay" section-id="252306" class="background-overlay" style="background-color: rgb(0, 0, 0); opacity: 0;"></div>
        
        <div class="cf-cta-item-container" section-id="252306" data-sortable-id="4">
          <div class="cf-cta-item disabled-item"></div>
        </div>


      </div>
    
  </div>
</div>


</div>

        </div>


      </div>
      <div column-position="second" id="section252305-column-second" section-id="252305" data-column="cf-col-md-12" vertical-padding="" horizontal-padding="" data-padding-top="cf-top-padding_2" data-padding-bottom="cf-bottom-padding_2" data-padding-left="cf-left-padding_2" data-padding-right="cf-right-padding_2" style="
          display: none;
        border: initial !important; border-style: solid !important; border-width: 0px !important; border-color:  !important;
        " class="cf-col cf-column cf-column-second   cf-col-md-12  cf-top-padding_2   cf-bottom-padding_2   cf-left-padding_2   cf-right-padding_2     cf-background-position-top-center cf-background-size-cover">

        <div id="section252305-second-overlay" section-id="252305" class="background-overlay" style="background-color: rgb(0, 0, 0); opacity: 0;"></div>
        
        <div class="cf-cta-item-container" section-id="252305" data-sortable-id="2">
          <div class="cf-cta-item disabled-item"></div>
        </div>


      </div>
      <div column-position="third" id="section252305-column-third" section-id="252305" data-column="cf-col-md-12" vertical-padding="" horizontal-padding="" data-padding-top="cf-top-padding_2" data-padding-bottom="cf-bottom-padding_2" data-padding-left="cf-left-padding_2" data-padding-right="cf-right-padding_2" style="
          display: none;
        border: initial !important; border-style: solid !important; border-width: 0px !important; border-color:  !important;
        " class="cf-col cf-column cf-column-third   cf-col-md-12  cf-top-padding_2   cf-bottom-padding_2   cf-left-padding_2   cf-right-padding_2     cf-background-position-top-center cf-background-size-cover">

        <div id="section252305-third-overlay" section-id="252305" class="background-overlay" style="background-color: rgb(0, 0, 0); opacity: 0;"></div>
        
        <div class="cf-cta-item-container" section-id="252305" data-sortable-id="3">
          <div class="cf-cta-item disabled-item"></div>
        </div>


      </div>
      <div column-position="fourth" id="section252305-column-fourth" section-id="252305" data-column="cf-col-md-12" vertical-padding="" horizontal-padding="" data-padding-top="cf-top-padding_2" data-padding-bottom="cf-bottom-padding_2" data-padding-left="cf-left-padding_2" data-padding-right="cf-right-padding_2" style="
          display: none;
        border: initial !important; border-style: solid !important; border-width: 0px !important; border-color:  !important;
        " class="cf-col cf-column cf-column-fourth   cf-col-md-12  cf-top-padding_2   cf-bottom-padding_2   cf-left-padding_2   cf-right-padding_2     cf-background-position-top-center cf-background-size-cover">

        <div id="section252305-fourth-overlay" section-id="252305" class="background-overlay" style="background-color: rgb(0, 0, 0); opacity: 0;"></div>
        
        <div class="cf-cta-item-container" section-id="252305" data-sortable-id="4">
          <div class="cf-cta-item disabled-item"></div>
        </div>


      </div>
    
  </div>
</div>


</div>

        </div>


      </div>
      <div column-position="second" id="section252304-column-second" section-id="252304" data-column="cf-col-md-6" vertical-padding="" horizontal-padding="" data-padding-top="cf-top-padding_2" data-padding-bottom="cf-bottom-padding_2" data-padding-left="cf-left-padding_2" data-padding-right="cf-right-padding_2" style="
          display: none;
        border: initial !important; border-style: solid !important; border-width: 0px !important; border-color:  !important;
        " class="cf-col cf-column cf-column-second   cf-col-md-6  cf-top-padding_2   cf-bottom-padding_2   cf-left-padding_2   cf-right-padding_2     cf-background-position-top-left cf-background-size-auto">

        <div id="section252304-second-overlay" section-id="252304" class="background-overlay" style="background-color: rgb(0, 0, 0); opacity: 0;"></div>
        
        <div class="cf-cta-item-container" section-id="252304" data-sortable-id="2">
          <div class="cf-cta-item disabled-item"></div>
        </div>


      </div>
      <div column-position="third" id="section252304-column-third" section-id="252304" data-column="cf-col-md-12" vertical-padding="" horizontal-padding="" data-padding-top="cf-top-padding_2" data-padding-bottom="cf-bottom-padding_2" data-padding-left="cf-left-padding_2" data-padding-right="cf-right-padding_2" style="
          display: none;
        border: initial !important; border-style: solid !important; border-width: 0px !important; border-color:  !important;
        " class="cf-col cf-column cf-column-third   cf-col-md-12  cf-top-padding_2   cf-bottom-padding_2   cf-left-padding_2   cf-right-padding_2     cf-background-position-top-center cf-background-size-cover">

        <div id="section252304-third-overlay" section-id="252304" class="background-overlay" style="background-color: rgb(0, 0, 0); opacity: 0;"></div>
        
        <div class="cf-cta-item-container" section-id="252304" data-sortable-id="3">
          <div class="cf-cta-item disabled-item"></div>
        </div>


      </div>
      <div column-position="fourth" id="section252304-column-fourth" section-id="252304" data-column="cf-col-md-12" vertical-padding="" horizontal-padding="" data-padding-top="cf-top-padding_2" data-padding-bottom="cf-bottom-padding_2" data-padding-left="cf-left-padding_2" data-padding-right="cf-right-padding_2" style="
          display: none;
        border: initial !important; border-style: solid !important; border-width: 0px !important; border-color:  !important;
        " class="cf-col cf-column cf-column-fourth   cf-col-md-12  cf-top-padding_2   cf-bottom-padding_2   cf-left-padding_2   cf-right-padding_2     cf-background-position-top-center cf-background-size-cover">

        <div id="section252304-fourth-overlay" section-id="252304" class="background-overlay" style="background-color: rgb(0, 0, 0); opacity: 0;"></div>
        
        <div class="cf-cta-item-container" section-id="252304" data-sortable-id="4">
          <div class="cf-cta-item disabled-item"></div>
        </div>


      </div>
    
  </div>
</div>

    </div>
  </div>
</div>

  </div>
  <style>

.cta40233-powered-by {
  display: none;
  bottom: 0;
  padding: 7px;
  padding-top: 5px;
  width: 100%;
  text-align: center;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  height: 30px;
  line-height: 22px !important;
    z-index: 100000;
    cursor: pointer;
      position: fixed;
      background: rgba(22, 31, 49, 0.85);
      border-radius: 0px 0px 3px 3px;
}


.cta40233-powered-by a {
  cursor: pointer;
  font-family: "Helvetica Neue", Helvetica, Arial, San-serif !important;
  letter-spacing: 0.5px;
  color: #abbbca;
  -webkit-font-smoothing: subpixel-antialiased !important;
  -moz-osx-font-smoothing: initial !important;
  font-smoothing: subpixel-antialiased !important;
  font-size: 11px;
  width: 100%;
  text-align: center;
  line-height: inherit !important;
  display: block;
  text-decoration: none !important;
}

.cta40233-powered-by a span {
  -webkit-font-smoothing: subpixel-antialiased !important;
  -moz-osx-font-smoothing: initial !important;
  font-smoothing: subpixel-antialiased !important;
  font-family: "Helvetica Neue", Helvetica, Arial, San-serif !important;
  letter-spacing: 0.5px;
}

.cta40233-powered-by img {
  width: 20px;
  transition: all 0.2s ease;
  left: 0;
  right: 0;
  float: left;
  margin-left: 5px;
  margin-right: auto;
}
.cta40233-powered-by .cf-row {
  margin-left: -15px;
  margin-right: -15px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  display: block;
}

.cta40233-powered-by .cf-row:before, .cta40233-powered-by .cf-row:after {
  content: " ";
  display: table;
}

.cta40233-powered-by .cf-outer-center {
  margin-left: auto !important;
  margin-right: auto !important;
  max-width: 140px !important;
}

.clearfix::after{clear:both;display:block;content:""}.fr-view strong{font-weight:700}.fr-view table{border:0;border-collapse:collapse;empty-cells:show;max-width:100%}.fr-view table.fr-dashed-borders td,.fr-view table.fr-dashed-borders th{border-style:dashed}.fr-view table.fr-alternate-rows tbody tr:nth-child(2n){background:#f5f5f5}.fr-view table td,.fr-view table th{border:1px solid #ddd}.fr-view table td:empty,.fr-view table th:empty{height:20px}.fr-view table td.fr-highlighted,.fr-view table th.fr-highlighted{border:1px double red}.fr-view table td.fr-thick,.fr-view table th.fr-thick{border-width:2px}.fr-view table th{background:#e6e6e6}.fr-view hr{clear:both;user-select:none;-o-user-select:none;-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-ms-user-select:none;page-break-after:always}.fr-view .fr-file{position:relative}.fr-view .fr-file::after{position:relative;content:"\1F4CE";font-weight:400}.fr-view pre{white-space:pre-wrap;word-wrap:break-word}.fr-view blockquote{border-left:solid 2px #5e35b1;margin-left:0;padding-left:5px;color:#5e35b1}.fr-view blockquote blockquote{border-color:#00bcd4;color:#00bcd4}.fr-view blockquote blockquote blockquote{border-color:#43a047;color:#43a047}.fr-view span.fr-emoticon{font-weight:400;font-family:"Apple Color Emoji","Segoe UI Emoji",NotoColorEmoji,"Segoe UI Symbol","Android Emoji",EmojiSymbols;display:inline;line-height:0}.fr-view span.fr-emoticon.fr-emoticon-img{background-repeat:no-repeat!important;font-size:inherit;height:1em;width:1em;min-height:20px;min-width:20px;display:inline-block;margin:-.1em .1em .1em;line-height:1;vertical-align:middle}.fr-view .fr-text-gray{color:#AAA!important}.fr-view .fr-text-bordered{border-top:solid 1px #222;border-bottom:solid 1px #222;padding:10px 0}.fr-view .fr-text-spaced{letter-spacing:1px}.fr-view .fr-text-uppercase{text-transform:uppercase}.fr-view img{position:relative;max-width:100%}.fr-view img.fr-dib{margin:5px auto;display:block;float:none;vertical-align:top}.fr-view img.fr-dib.fr-fil{margin-left:0}.fr-view img.fr-dib.fr-fir{margin-right:0}.fr-view img.fr-dii{display:inline-block;float:none;vertical-align:bottom;margin-left:5px;margin-right:5px;max-width:calc(100% - (2 * 5px))}.fr-view img.fr-dii.fr-fil{float:left;margin:5px 5px 5px 0;max-width:calc(100% - 5px)}.fr-view img.fr-dii.fr-fir{float:right;margin:5px 0 5px 5px;max-width:calc(100% - 5px)}.fr-view img.fr-rounded{border-radius:100%;-moz-border-radius:100%;-webkit-border-radius:100%;-moz-background-clip:padding;-webkit-background-clip:padding-box;background-clip:padding-box}.fr-view img.fr-bordered{border:solid 10px #CCC;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box}.fr-view .fr-video{text-align:center;position:relative}.fr-view .fr-video>*{-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;max-width:100%;border:0}.fr-view .fr-video.fr-dvb{display:block;clear:both}.fr-view .fr-video.fr-dvb.fr-fvl{text-align:left}.fr-view .fr-video.fr-dvb.fr-fvr{text-align:right}.fr-view .fr-video.fr-dvi{display:inline-block}.fr-view .fr-video.fr-dvi.fr-fvl{float:left}.fr-view .fr-video.fr-dvi.fr-fvr{float:right}.fr-view a.fr-strong{font-weight:700}.fr-view a.fr-green{color:green}.fr-view button.fr-rounded,.fr-view input.fr-rounded,.fr-view textarea.fr-rounded{border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;-moz-background-clip:padding;-webkit-background-clip:padding-box;background-clip:padding-box}.fr-view button.fr-large,.fr-view input.fr-large,.fr-view textarea.fr-large{font-size:24px}a.fr-view.fr-strong{font-weight:700}a.fr-view.fr-green{color:green}img.fr-view{position:relative;max-width:100%}img.fr-view.fr-dib{margin:5px auto;display:block;float:none;vertical-align:top}img.fr-view.fr-dib.fr-fil{margin-left:0}img.fr-view.fr-dib.fr-fir{margin-right:0}img.fr-view.fr-dii{display:inline-block;float:none;vertical-align:bottom;margin-left:5px;margin-right:5px;max-width:calc(100% - (2 * 5px))}img.fr-view.fr-dii.fr-fil{float:left;margin:5px 5px 5px 0;max-width:calc(100% - 5px)}img.fr-view.fr-dii.fr-fir{float:right;margin:5px 0 5px 5px;max-width:calc(100% - 5px)}img.fr-view.fr-rounded{border-radius:100%;-moz-border-radius:100%;-webkit-border-radius:100%;-moz-background-clip:padding;-webkit-background-clip:padding-box;background-clip:padding-box}img.fr-view.fr-bordered{border:solid 10px #CCC;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box}

.fr-view img.fr-dii {
  margin-left: 0px !important;
  margin-right: 0px !important;
  max-width: 100% !important;
}

#cta_40233 {
  all: initial;
  display: block;
  transition: all .2s ease;
}

#cta_40233 .cf-container {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  display: block;
  max-height: 100000px;
  transition: all 0.5s ease;
  scrollbar-width: none;
  -ms-overflow-style: none;
  box-shadow: 0 1px 23px 0 rgba(50,57,66,0.09);
}

#cta_40233 .cf-container::-webkit-scrollbar {
  width: 0;
  height: 0;
}

#cta_40233 .cf-cta-container {
}

#cta_40233 .cf-column {
  z-index: 0;
}

#cta_40233 .cf-video-background-container {
  position: absolute;
  width: 100%;
  height: 100%;
  overflow: hidden;
  z-index: initial;
}

#cta_40233 .cf-section, #cta_40233 .cf-column {
background-repeat: no-repeat;
background-size: cover;
background-position: center top;
}

#cta_40233 .cf-cta-container {
  position: relative;
}

#cta_40233 .cf-button-outer {
  display: table;
  margin: 0px !important;
}

#cta_40233 .cf-outer-center {
  margin-left: auto !important;
  margin-right: auto !important;
}

#cta_40233 .cf-outer-left {
  margin-left: 0px;
  margin-right: auto !important;
}

#cta_40233 .cf-outer-right {
  margin-left: auto !important;
  margin-right: 0px;
}

@media (max-width: 480px) {

  #cta_40233 .cf-mobile-outer-center {
    margin-left: auto !important;
    margin-right: auto !important;
  }

  #cta_40233 .cf-mobile-outer-left {
    margin-left: 0px;
    margin-right: auto !important;
  }

  #cta_40233 .cf-mobile-outer-right {
    margin-left: auto !important;
    margin-right: 0px;
  }

}

#cta_40233 .cf-step {
  display: none;
}

#cta_40233 .cf-profile {
    background: #fff;
    position: absolute;
    top: 0px;
    border-radius: 4px 4px 0px 0px;
      height: 71px;
  width: 100%;
  padding: 10px 20px 10px;
}

#cta_40233 .cf-profile .cf-col-xs-12 {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}

#cta_40233 .cf-profile .cf-col-xs-2 {
  max-width: 50px;
}

#cta_40233 .cf-profile.cf-center p {
  text-align: center !important;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

#cta_40233 .cf-profile.cf-left p {
  text-align: left !important;
  line-height: initial;
}

#cta_40233 .cf-profile-name {
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif !important;
  font-weight: 400 !important;
  line-height: 1.2em !important;
  -webkit-font-smoothing: subpixel-antialiased;
  font-smoothing: subpixel-antialiased;
    color: rgb(60, 73, 83);
  margin: 0 !important;
  font-size: 13px !important;
  padding: 0px !important;
}

#cta_40233 .cf-profile-title {
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif !important;
  font-size: 13px !important;
  font-weight: 400 !important;
  line-height: 1.5em !important;
  -webkit-font-smoothing: subpixel-antialiased;
  font-smoothing: subpixel-antialiased;
    color: #6f818e !important;
  margin: 0 !important;
  padding: 0px !important;
}

#cta_40233 .cf-profile.cf-left .cf-profile-name, #cta_40233 .cf-profile.cf-left .cf-profile-title {
  display: block !important;
  font-size: 12px !important;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

#cta_40233 .cf-profile-img img {
    width: 45px;
    height: 45px;
    margin-bottom: -3px;
  position: relative;
  font-family: "Helvetica Neue", Arial, sans-serif !important;
  background-size: 100% auto;
  border-radius: 100%;
  margin-left: auto;
  margin-right: auto;
    border: 2px solid #fff;
    margin-top: -20px;
}

#cta_40233 .step-inner {
  overflow: hidden;
  border-radius: ;
  ;
  width: 100%;
}

#cta_40233 .cf-row {
  margin-left: -15px;
  margin-right: -15px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  display: block;
}

#cta_40233 .cf-row:before, #cta_40233 .cf-row:after {
    content: " ";
    display: table;
}

#cta_40233 .cf-row:after {
    clear: both;
}

#cta_40233 .cf-little-vspace {
  padding-top: 0.5em !important;
  padding-bottom: 0.5em !important;
}

#cta_40233 .cf-regular-vspace {
  padding-top: 1.3em !important;
  padding-bottom: 1.3em !important;
}

#cta_40233 .cf-more-vspace {
  padding-top: 2em !important;
  padding-bottom: 2em !important;
}

#cta_40233 .cf-center, #cta_40233 .cf-center div, .cta40233 .cf-center, .cta40233 .cf-center div {
  text-align: center !important;
}

#cta_40233 .cf-left, #cta_40233 .cf-left div, .cta40233 .cf-left, .cta40233 .cf-left div {
  text-align: left !important;
}

#cta_40233 .cf-right, #cta_40233 .cf-right div, .cta40233 .cf-right, .cta40233 .cf-right div {
  text-align: right !important;
}

@media (max-width: 480px) {
  #cta_40233 .cf-mobile-center, #cta_40233 .cf-mobile-center div, .cta40233 .cf-mobile-center, .cta40233 .cf-mobile-center div {
    text-align: center !important;
  }

  #cta_40233 .cf-mobile-left, #cta_40233 .cf-mobile-left div, .cta40233 .cf-mobile-left, .cta40233 .cf-mobile-left div {
    text-align: left !important;
  }

  #cta_40233 .cf-mobile-right, #cta_40233 .cf-mobile-right div, .cta40233 .cf-mobile-right, .cta40233 .cf-mobile-right div {
    text-align: right !important;
  }
}

#cta_40233 .cf-col {
  position: relative;
  min-height: 1px;
  padding-left: 15px;
  padding-right: 15px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  display: block;
  float: left;
}

#cta_40233 .cf-column, #cta_40233 .cf-cta-item-container {
  min-height: 50px;
}

@media (max-width: 480px) {
  #cta_40233 .cf-column, #cta_40233 .cf-cta-item-container {
    min-height: 0px;
  }
}

#cta_40233 .cf-background-position-top-left {
  background-position: top left !important;
}

#cta_40233 .cf-background-position-top-center {
  background-position: top center !important;
}

#cta_40233 .cf-background-position-top-right {
  background-position: top right !important;
}

#cta_40233 .cf-background-position-center-left {
  background-position: center left !important;
}

#cta_40233 .cf-background-position-center-center {
  background-position: center center !important;
}

#cta_40233 .cf-background-position-center-right {
  background-position: center right !important;
}

#cta_40233 .cf-background-position-bottom-left {
  background-position: bottom left !important;
}

#cta_40233 .cf-background-position-bottom-center {
  background-position: bottom center !important;
}

#cta_40233 .cf-background-position-bottom-right {
  background-position: bottom right !important;
}

#cta_40233 .cf-background-size-auto {
  background-size: auto !important;
}

#cta_40233 .cf-background-size-cover {
  background-size: cover !important;
}

#cta_40233 .cf-background-size-expand-height {
  background-size: auto 100% !important;
}

#cta_40233 .cf-vertical-nopadding {
  padding-top: 0px;
  padding-bottom: 0px;
}

#cta_40233 .cf-vertical-somepadding {
  padding-top: 15px;
  padding-bottom: 15px;
}

#cta_40233 .cf-vertical-morepadding {
  padding-top: 25px;
  padding-bottom: 25px;
}

#cta_40233 .cf-vertical-verypadding {
  padding-top: 40px;
  padding-bottom: 40px;
}

#cta_40233 .cf-vertical-verypadding2 {
  padding-top: 70px;
  padding-bottom: 70px;
}

#cta_40233 .cf-vertical-verypadding3 {
  padding-top: 120px;
  padding-bottom: 120px;
}

#cta_40233 .cf-horizontal-nopadding {
  padding-left: 0px;
  padding-right: 0px;
}

#cta_40233 .cf-horizontal-somepadding {
  padding-left: 15px;
  padding-right: 15px;
}

#cta_40233 .cf-horizontal-morepadding {
  padding-left: 25px;
  padding-right: 25px;
}

#cta_40233 .cf-horizontal-verypadding {
  padding-left: 40px;
  padding-right: 40px;
}

#cta_40233 .cf-horizontal-verypadding2 {
  padding-left: 70px;
  padding-right: 70px;
}

#cta_40233 .cf-horizontal-verypadding3 {
  padding-left: 120px;
  padding-right: 120px;
}

#cta_40233 .cf-cta-item {
  position: relative;
  display: block;
}

#cta_40233 .cf-top-padding_0 {
  padding-top: 0px !important;
}

#cta_40233 .cf-top-padding_1 {
  padding-top: 15px !important;
}

#cta_40233 .cf-top-padding_2 {
  padding-top: 25px !important;
}

#cta_40233 .cf-top-padding_3 {
  padding-top: 40px !important;
}

#cta_40233 .cf-top-padding_4 {
  padding-top: 70px !important;
}

#cta_40233 .cf-top-padding_5 {
  padding-top: 120px !important;
}

#cta_40233 .cf-bottom-padding_0 {
  padding-bottom: 0px !important;
}

#cta_40233 .cf-bottom-padding_1 {
  padding-bottom: 15px !important;
}

#cta_40233 .cf-bottom-padding_2 {
  padding-bottom: 25px !important;
}

#cta_40233 .cf-bottom-padding_3 {
  padding-bottom: 40px !important;
}

#cta_40233 .cf-bottom-padding_4 {
  padding-bottom: 70px !important;
}

#cta_40233 .cf-bottom-padding_5 {
  padding-bottom: 120px !important;
}


@media (min-width: 481px) {
  #cta_40233 .cf-left-padding_0 {
    padding-left: 0px !important;
  }

  #cta_40233 .cf-left-padding_1 {
    padding-left: 15px !important;
  }

  #cta_40233 .cf-left-padding_2 {
    padding-left: 25px !important;
  }

  #cta_40233 .cf-left-padding_3 {
    padding-left: 40px !important;
  }

  #cta_40233 .cf-left-padding_4 {
    padding-left: 70px !important;
  }

  #cta_40233 .cf-left-padding_5 {
    padding-left: 120px !important;
  }

  #cta_40233 .cf-right-padding_0 {
    padding-right: 0px !important;
  }

  #cta_40233 .cf-right-padding_1 {
    padding-right: 15px !important;
  }

  #cta_40233 .cf-right-padding_2 {
    padding-right: 25px !important;
  }

  #cta_40233 .cf-right-padding_3 {
    padding-right: 40px !important;
  }

  #cta_40233 .cf-right-padding_4 {
    padding-right: 70px !important;
  }

  #cta_40233 .cf-right-padding_5 {
    padding-right: 120px !important;
  }
}

@media (max-width: 480px) {
  #cta_40233 .cf-left-padding_0 {
    padding-left: 0px !important;
    padding-right: 0px !important;
  }

  #cta_40233 .cf-left-padding_1 {
    padding-left: 15px !important;
    padding-right: 15px !important;
  }

  #cta_40233 .cf-left-padding_2 {
    padding-left: 25px !important;
    padding-right: 25px !important;
  }

  #cta_40233 .cf-left-padding_3 {
    padding-left: 25px !important;
    padding-right: 25px !important;
  }

  #cta_40233 .cf-left-padding_4 {
    padding-left: 25px !important;
    padding-right: 25px !important;
  }

  #cta_40233 .cf-left-padding_5 {
    padding-left: 25px !important;
    padding-right: 25px !important;
  }

  #cta_40233 .cf-right-padding_0 {
    padding-left: 0px !important;
    padding-right: 0px !important;
  }

  #cta_40233 .cf-right-padding_1 {
    padding-left: 15px !important;
    padding-right: 15px !important;
  }

  #cta_40233 .cf-right-padding_2 {
    padding-left: 25px !important;
    padding-right: 25px !important;
  }

  #cta_40233 .cf-right-padding_3 {
    padding-left: 25px !important;
    padding-right: 25px !important;
  }

  #cta_40233 .cf-right-padding_4 {
    padding-left: 25px !important;
    padding-right: 25px !important;
  }

  #cta_40233 .cf-right-padding_5 {
    padding-left: 25px !important;
    padding-right: 25px !important;
  }

  #cta_40233 .cf-mobile-left-padding_0 {
    padding-left: 0px !important;
  }

  #cta_40233 .cf-mobile-left-padding_1 {
    padding-left: 15px !important;
  }

  #cta_40233 .cf-mobile-left-padding_2 {
    padding-left: 25px !important;
  }

  #cta_40233 .cf-mobile-left-padding_3 {
    padding-left: 40px !important;
  }

  #cta_40233 .cf-mobile-left-padding_4 {
    padding-left: 70px !important;
  }

  #cta_40233 .cf-mobile-left-padding_5 {
    padding-left: 120px !important;
  }

  #cta_40233 .cf-mobile-right-padding_0 {
    padding-right: 0px !important;
  }

  #cta_40233 .cf-mobile-right-padding_1 {
    padding-right: 15px !important;
  }

  #cta_40233 .cf-mobile-right-padding_2 {
    padding-right: 25px !important;
  }

  #cta_40233 .cf-mobile-right-padding_3 {
    padding-right: 40px !important;
  }

  #cta_40233 .cf-mobile-right-padding_4 {
    padding-right: 70px !important;
  }

  #cta_40233 .cf-mobile-right-padding_5 {
    padding-right: 120px !important;
  }


  #cta_40233 .cf-mobile-top-padding_0 {
    padding-top: 0px !important;
  }

  #cta_40233 .cf-mobile-top-padding_1 {
    padding-top: 15px !important;
  }

  #cta_40233 .cf-mobile-top-padding_2 {
    padding-top: 25px !important;
  }

  #cta_40233 .cf-mobile-top-padding_3 {
    padding-top: 40px !important;
  }

  #cta_40233 .cf-mobile-top-padding_4 {
    padding-top: 70px !important;
  }

  #cta_40233 .cf-mobile-top-padding_5 {
    padding-top: 120px !important;
  }

  #cta_40233 .cf-mobile-bottom-padding_0 {
    padding-bottom: 0px !important;
  }

  #cta_40233 .cf-mobile-bottom-padding_1 {
    padding-bottom: 15px !important;
  }

  #cta_40233 .cf-mobile-bottom-padding_2 {
    padding-bottom: 25px !important;
  }

  #cta_40233 .cf-mobile-bottom-padding_3 {
    padding-bottom: 40px !important;
  }

  #cta_40233 .cf-mobile-bottom-padding_4 {
    padding-bottom: 70px !important;
  }

  #cta_40233 .cf-mobile-bottom-padding_5 {
    padding-bottom: 120px !important;
  }
}

#cta_40233 .cf-button {
  display: inline-block;
  touch-action: manipulation;
  -webkit-box-sizing: border-box;
  outline-color: transparent;
  outline-style: none;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  min-width: 100px;
  cursor: pointer;
  margin: 0px !important;
  text-transform: none !important;
  letter-spacing: initial !important;
  height: initial !important;
}

#cta_40233 .cf-button-small {
  padding: 8px 15px !important;
  text-align: center !important;
  font-size: 16px;
  white-space: normal;
}

.cf-button-small p {
  font-size: 16px;
}

#cta_40233 .cf-button-small p {
  font-size: 14px !important;
}

#cta_40233 .cf-button-regular {
  padding: 10px 20px !important;
  text-align: center !important;
  font-size: 18px;
  white-space: normal;
}

#cta_40233 .cf-button-regular p {
  font-size: 18px !important;
}

#cta_40233 .cf-button-large {
  padding: 13px 20px !important;
  text-align: center !important;
  font-size: 20px;
  white-space: normal;
}

#cta_40233 .cf-button-large p {
  font-size: 20px !important;
}

#cta_40233 .cf-button-small {
  padding-left: 15px !important;
  padding-right: 15px !important;
}

#cta_40233 .cf-button-mid {
  min-width: 250px !important;
}

#cta_40233 .cf-full-width {
  min-width: 100% !important;
}

#cta_40233 .cf-thanks-message {
  background: #27ae60;
  color: #fff;
  font-family: Helvetica, Arial, sans-serif;
  border-radius: 3px;
}

#cta_40233 .cf-button-primary {
  color: #fff;
  background: #e67e22;
}

#cta_40233 .cf-cta-item .new_contact {
  display: inline-block;
  width: 100%;
  position: relative;
}

#cta_40233 .cf-form-fields {
  position: relative;
  margin: 0px !important;
}

#cta_40233 .cf-form-field {
  margin: 0px !important;
  position: initial !important;
}

#cta_40233 .cf-form-small {
  max-width: 375px !important;
}

#cta_40233 .cf-form-mid {
  max-width: 450px !important;
}

#cta_40233 .cf-form-wide {
  max-width: 700px !important;
}

#cta_40233 .cf-form-large {
  max-width: 100% !important;
}

#cta_40233 .cf-button p {
  font-family: sans-serif;
  line-height: 1.3em;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-smoothing: antialiased;
  color: inherit;
  text-align: center;
}

#cta_40233 p, #cta_40233 li {
  font-style: normal !important;
  font-variant: normal !important;
  font-weight: 400;
  font-size: 1em;
  margin: 0;
  padding: 0;
  width: 100% !important;
  max-width: 100% !important;
  text-align: inherit;
}

#cta_40233 h1, #cta_40233 h2, #cta_40233 h3, #cta_40233 h4, #cta_40233 h5 {
  margin: 0;
  font-weight: 400 !important;
  font-style: normal !important;
  font-variant: normal !important;
  padding: 0;
  line-height: 1.6em;
  width: 100% !important;
  max-width: 100% !important;
  border: none !important;
  text-transform: initial !important;
  opacity: 1 !important;
  letter-spacing: initial !important;
  text-align: inherit;
}

#cta_40233 h1:before, #cta_40233 h1:after, #cta_40233 h2:before, #cta_40233 h2:after, #cta_40233 h3:before, #cta_40233 h3:after, #cta_40233 h4:before, #cta_40233 h4:after, #cta_40233 h5:before, #cta_40233 h5:after {
  all: initial !important;
}

#cta_40233 h1 {
  font-size: 2em !important;
  line-height: 50px;
}

#cta_40233 h2 {
  font-size: 1.5em !important;
  line-height: 38px;
}

#cta_40233 h3 {
  font-size: 1.17em !important;
  line-height: 29px;
}

#cta_40233 h4 {
  font-size: 1em !important;
  line-height: 25px;
}

#cta_40233 p, #cta_40233 li {
  line-height: 25px;
  text-transform: initial !important;
}

#cta_40233 p strong, #cta_40233 p em, #cta_40233 .fr-view strong, #cta_40233 .fr-view em {
  color: inherit !important;
  font-size: inherit !important;
}

#cta_40233 span:not(.glyphicon) {
  text-transform: initial !important;
  display: initial;
  letter-spacing: initial;
  text-align: initial;
  font-family: sans-serif;
}

#cta_40233 span:not(.glyphicon) span {
  font-family: inherit;
}

#cta_40233 .cf-button p span:not(.glyphicon) {
  font-family: inherit;
}

#cta_40233 span[data-merge]:not(.glyphicon) {
  font-family: inherit;
}

#cta_40233 .background-overlay, #cta_40233 .section-overlay {
   position: absolute;
   top: 0;
   left: 0;
   width: 100%;
   height: 100%;
   z-index: 0;
}

#cta_40233 .section-overlay {
  overflow: hidden;
  background-repeat: no-repeat;
  background-size: cover;
  background-position: center top;
}

@media (min-width: 1001px) and (max-width: 1400px) {
  #cta_40233 .cf-video-background-iframe {
    position: absolute;
    width: 200%;
    height: 200%;
    top: 50%;
    min-width: 1200px;
    min-height: 900px;
      left: -50%;
    transform: translate(0%, -50%);
      z-index: 0;
  }
}

@media (min-width: 1401px) {
  #cta_40233 .cf-video-background-iframe {
    position: absolute;
    width: 200%;
    height: 200%;
    top: 50%;
    min-width: 2460px;
    min-height: 1400px;
      left: -50%;
    transform: translate(0%, -50%);
      z-index: 0;
  }
}

@media (max-width: 1000px) {
  #cta_40233 .cf-video-background-iframe {
    display: none;
      z-index: 0;
  }
}

#cta_40233 {
}

#cta_40233 .disabled-item {
  background: none !important;
  height: 0px;
}

#cta_40233 .cf-button-small {
  padding: 8px 15px;
  text-align: center !important;
  font-size: 16px;
}

.cta40233.cf-prehook-popup {
  background: #fff;
  min-height: 70px;
  position: fixed;
  max-width: 300px;
  bottom: 30px;
  right: 30px;
  z-index: 10000;
  width: 100%;
  padding-bottom: 5px;
  border-radius: 5px;
  box-shadow: 0px 6px 24.19px 2px rgba(2, 27, 68, 0.11);
  overflow: hidden;
}

@media (max-width: 480px) {
  .cta40233.cf-prehook-popup {
    bottom: 10px;
    margin-left: auto;
    margin-right: auto;
    left: 0;
    right: 0;
  }
}

.cta40233 .cf-prehook p, .cta40233 .cf-prehook-popup p {
  -webkit-font-smoothing: subpixel-antialiased;
  -moz-osx-font-smoothing: initial;
  font-smoothing: subpixel-antialiased;
}

.cta40233 .cf-prehook p, .cta40233 .cf-prehook .fr-wrapper .fr-element p {
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif !important;
  margin: 0;
  font-size: 16px !important;
  color: #6f818e;
  line-height: 1.4 !important;
  margin: 0 !important;
  padding: 0px !important;
}

.cta40233 .prehook-name p, .cta40233 .prehook-name .fr-wrapper .fr-element p {
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif !important;
  font-weight: 400 !important;
  line-height: 1.2em;
  -webkit-font-smoothing: subpixel-antialiased;
  font-smoothing: subpixel-antialiased;
  color: rgb(60, 73, 83);
  margin: 0 !important;
  font-size: 13px !important;
  padding: 0px !important;
  display: block !important;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

.cta40233 .prehook-title p, .cta40233 .prehook-title .fr-wrapper .fr-element p {
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif !important;
  font-size: 11px !important;
  line-height: 1.2em;
  color: #6f818e !important;
  margin: 0 !important;
  padding: 0px !important;
  display: block !important;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

.cta40233 .prehook-profile {
  width: 35px;
  height: 35px;
  position: relative;
  left: 13px;
  top: 5px;
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif !important;
  letter-spacing: 0.5px;
  background-size: 100% auto;
  border-radius: 100%;
}

.cta40233 .prehook-profile img {
  width: 35px;
  height: 35px;
  border-radius: 100%;
  margin: 0;
}

.cta40233 .prehook-close {
  position: absolute;
  right: 7px;
  top: 2px;
  color: #ccc;
  padding: 5px;
  z-index: 100002;
  cursor: pointer;
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif !important;
}

.cta40233 .cf-prehook-button {
  display: inline-block;
  touch-action: manipulation;
  -webkit-box-sizing: border-box;
  outline-color: transparent;
  outline-style: none;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  white-space: nowrap;
  min-width: 50px;
  cursor: pointer;
  box-shadow: 0px 1px 1px 2px rgba(2, 27, 68, 0.05) !important;
    background: #1a90f4;
  color: #fff !important;
  padding: 8px 13px;
  font-weight: 600;
  margin-bottom: 10px;
  border-radius: 18px;
  max-width: 120px;
  overflow: hidden;
  position: absolute;
  right: 15px;
  bottom: 0px;
}

.cta40233 .cf-prehook-button p, .cta40233 .cf-prehook-button .fr-wrapper .fr-element p {
  font-family:  "Helvetica Neue", Arial, sans-serif !important;
  line-height: 1em;
  margin: 0 !important;
  font-size: 13px !important;
  padding: 0px !important;
}

.cta40233 .cf-prehook-button p {
  color: #fff !important;
}

.cf_line_height_1 {
  line-height: 1em !important;
}

.cf_line_height_1_3 {
  line-height: 1.3em !important;
}

.cf_line_height_1_6 {
  line-height: 1.6em !important;
}

.cf_line_height_1_9 {
  line-height: 1.9em !important;
}

.cf_line_height_2_5 {
  line-height: 2.5em !important;
}

#cta_40233 .cf-not-rounded, #cta_40233 .cf-not-rounded button {
  border-radius: 0px !important;
}

#cta_40233 .cf-slightly-rounded, #cta_40233 .cf-slightly-rounded button {
  border-radius: 4px !important;
}

#cta_40233 .cf-fully-rounded, #cta_40233 .cf-fully-rounded button {
  border-radius: 100px !important;
}

#cta_40233 .cf-field-not-rounded input, #cta_40233 .cf-field-not-rounded select, #cta_40233 .cf-field-not-rounded textarea {
  border-radius: 0px !important;
}

#cta_40233 .cf-field-slightly-rounded input, #cta_40233 .cf-field-slightly-rounded select, #cta_40233 .cf-field-slightly-rounded textarea {
  border-radius: 3px !important;
}

#cta_40233 .cf-field-fully-rounded input, #cta_40233 .cf-field-fully-rounded select, #cta_40233 .cf-field-fully-rounded textarea {
  border-radius: 100px !important;
}

#cta_40233 .cf-survey-field {
  display: inline-block !important;
  width: 100% !important;
}

#cta_40233 .cf-survey-choice {
  position: relative;
  display: inline-block;
  font-family: inherit !important;
  padding: 10px 0px;
  border: 2px solid #0072f7;
  background: #fff;
  color: #0072f7;
  border-radius: 50px;
  line-height: 1.3em;
  font-size: 15px;
  margin: 4px !important;
  min-width: 60px;
  cursor: pointer !important;
  -webkit-font-smoothing: subpixel-antialiased !important;
}

#cta_40233 .cf-survey-choice.cf-button-small {
  padding: 10px 0px !important;
  padding: 7px 10px !important;
}

#cta_40233 .cf-survey-choice.cf-survey-responsive {
  width: initial !important;
}

#cta_40233 .cf-survey-choice.cf-survey-regular {
  width: 100% !important;
  max-width: 300px !important;
  display: block !important;
  margin-bottom: 10px !important;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

#cta_40233 .cf-left .cf-survey-choice.cf-survey-regular {
  margin-left: 0 !important;
  margin-right: auto !important;
}

#cta_40233 .cf-center .cf-survey-choice.cf-survey-regular {
  margin-left: auto !important;
  margin-right: auto !important;
}

#cta_40233 .cf-right .cf-survey-choice.cf-survey-regular {
  margin-left: auto !important;
  margin-right: 0 !important;
}

#cta_40233 .cf-survey-choice.cf-survey-regular::after {
  content: "";
  display: block;
  clear: both;
}

#cta_40233 .cf-survey-choice.cf-survey-full {
  width: 100% !important;
  margin-left: initial !important;
  margin-right: initial !important;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

#cta_40233 .cf-survey-choice-label {
  font-family: inherit !important;
  padding-left: 10px !important;
  padding-right: 10px !important;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

#cta_40233 .cf-survey-choice-label p {
  color: inherit;
}

#cta_40233 .cf-survey-choice-image-container {
  display: none;
  margin: 10px;
  overflow: hidden;
  vertical-align: middle;
  position: relative;
  text-align: center !important;
}

#cta_40233 .cf-survey-choice-image-container img {
  max-width: initial !important;
  min-height: initial !important;
  height: auto !important;
  width: 90% !important;
  position: absolute !important;
  top: 0 !important;
  bottom: 0 !important;
  left: 0 !important;
  right: 0 !important;
  margin: auto !important;
}

#cta_40233 .cf-survey-choice-image-size-120 {
  width: 120px !important;
  height: 80px !important;
  padding: 5px !important;
}

#cta_40233 .cf-survey-choice-image-size-200 {
  width: 200px !important;
  height: 120px !important;
}

#cta_40233 .cf-survey-choice-image-size-300 {
  width: 300px !important;
  height: 200px !important;
}

#cta_40233 .cf-survey-choice-image-size-400 {
  width: 400px !important;
  height: 240px !important;
}

#cta_40233 .cf-survey-choice-image-size-500 {
  width: 500px !important;
  height: 300px !important;
}

#cta_40233 .cf-survey-choice-image-size-600 {
  width: 600px !important;
  height: 360px !important;
}

#cta_40233 .cf-survey-choice-image-size-700 {
  width: 700px !important;
  height: 420px !important;
}

#cta_40233 .cf-survey-choice-image .cf-survey-choice-image-container {
  display: block !important;
}

#cta_40233 .cf-image p {
  margin: 0 !important;
  line-height: 0 !important;
}

#cta_40233 .cf-image img {
  display: inline !important;
}

#cta_40233 .cf-form-field {
  margin: 0px !important;
  position: relative !important;
}

#cta_40233 .cf-form-2 {
  min-height: 45px;
  max-width: 500px;
}

#cta_40233 .cf-form-2 form {
  border: 0px !important;
  float: initial !important;
}

#cta_40233 .cf-form-2[style*="font-family"] .cf-form-fields {
  font-family: inherit !important;
}

#cta_40233 .cf-form-2 .cf-form-fields .cf-form-field {
  display: none;
}

#cta_40233 .cf-form-2[style*="font-family"] .cf-form-fields .cf-form-field {
  font-family: inherit !important;
}

#cta_40233 .cf-form-2 .cf-form-fields .cf-form-field[data-visible="true"] {
  display: block !important;
  float: left;
  width: 100%;
}

#cta_40233 .cf-form-2 .cf-consent-field {
  position: relative;
  float: left;
}

#cta_40233 .cf-form-2 .cf-email-validation {
  display: none;
  height: 22px;
  cursor: initial;
  opacity: 1;
  width: initial !important;
  position: absolute;
  bottom: 20px;
  float: right;
  right: 10px;
}

#cta_40233 .cf-form-2.cf-form-horizontal .cf-form-fields {
  display: flex;
  flex-flow: row wrap;
  justify-content: center;
  width: 85%;
  float: left;
  position: relative;
}

#cta_40233 .cf-form-2.cf-form-vertical .cf-form-field[data-field="name"][data-visible="true"][data-adjacent="lastname"] {
  width: 49%;
  float: left;
  margin-right: 2% !important;
}

#cta_40233 .cf-form-2.cf-form-vertical .cf-form-field[data-field="name"][data-visible="true"][data-adjacent="lastname"] + .cf-form-field[data-field="lastname"][data-visible="true"] {
  width: 49%;
  float: left;
}

#cta_40233 .cf-form-2.cf-form-horizontal[data-visible-fields] .cf-form-fields .cf-form-field[data-visible="true"] {
  width: 24% !important;
  margin-right: 1% !important;
}

#cta_40233 .cf-form-2.cf-form-horizontal[data-visible-fields="1"] .cf-form-fields .cf-form-field[data-visible="true"] {
  width: 100% !important;
  margin-right: 6px !important;
}

#cta_40233 .cf-form-2.cf-form-horizontal[data-visible-fields="1"] .cf-form-fields .cf-form-field[data-visible="true"] {
  margin-right: 0px !important;
}

#cta_40233 .cf-form-2.cf-form-horizontal[data-visible-fields="1"].cf-field-not-rounded .cf-form-fields .cf-form-field[data-visible="true"] input {
  border-radius: 0px !important;
  border-right: 0px !important;
}

#cta_40233 .cf-form-2.cf-form-horizontal[data-visible-fields="1"].cf-field-slightly-rounded .cf-form-fields .cf-form-field[data-visible="true"] input {
  border-radius: 3px 0px 0px 3px !important;
  border-right: 0px !important;
}

#cta_40233 .cf-form-2.cf-form-horizontal[data-visible-fields="1"].cf-field-fully-rounded .cf-form-fields .cf-form-field[data-visible="true"] input {
  border-radius: 100px 0px 0px 100px !important;
  border-right: 0px !important;
}

#cta_40233 .cf-form-2.cf-form-horizontal[data-visible-fields="1"] .cf-slightly-rounded button {
  border-radius: 0px 3px 3px 0px !important;
}

#cta_40233 .cf-form-2.cf-form-horizontal[data-visible-fields="1"] .cf-fully-rounded button {
  border-radius: 0px 100px 100px 0px !important;
}

#cta_40233 .cf-form-2.cf-form-horizontal[data-visible-fields="2"] .cf-form-fields .cf-form-field[data-visible="true"] {
  width: 47.5% !important;
  margin-right: 6px !important;
}

#cta_40233 .cf-form-2.cf-form-horizontal[data-visible-fields="3"] .cf-form-fields .cf-form-field[data-visible="true"] {
  width: 31% !important;
  margin-right: 1% !important;
}

#cta_40233 .cf-form-2.cf-form-horizontal[data-visible-fields="4"] .cf-form-fields .cf-form-field[data-visible="true"] {
  width: 24% !important;
  margin-right: 1% !important;
}

#cta_40233 .cf-form-2.cf-form-horizontal[data-consent="privacy"] .new_contact, #cta_40233 .cf-form-2.cf-form-horizontal[data-consent="marketing"] .new_contact {
  padding-bottom: 40px;
}

#cta_40233 .cf-form-2.cf-form-horizontal.cf-form-small[data-consent="both"] .new_contact, #cta_40233 .cf-form-2.cf-form-horizontal.cf-form-mid[data-consent="both"] .new_contact {
  padding-bottom: 40px;
  margin-bottom: 40px;
}

#cta_40233 .cf-form-2.cf-form-horizontal.cf-form-wide[data-consent="both"] .new_contact, #cta_40233 .cf-form-2.cf-form-horizontal.cf-form-large[data-consent="both"] .new_contact {
  padding-bottom: 40px;
}

#cta_40233 .cf-form-2.cf-form-horizontal .cf-form-consent {
  position: absolute;
  width: 100%;
  height: 20px;
  left: 0;
  bottom: 0;
  padding: 0 !important;
}

#cta_40233 .cf-form-2.cf-form-vertical .cf-consent-field {
  width: 100%;
  padding-bottom: 7px !important;
}

#cta_40233 .cf-form-2.cf-form-horizontal[data-consent="both"] .cf-form-consent, #cta_40233 .cf-form-2.cf-form-horizontal[data-consent="marketing"] .cf-form-consent, #cta_40233 .cf-form-2.cf-form-horizontal[data-consent="privacy"] .cf-form-consent {
  display: inline-block !important;
}

#cta_40233 .cf-form-2.cf-form-horizontal.cf-form-wide[data-consent="both"] .cf-form-consent .cf-consent-field, #cta_40233 .cf-form-2.cf-form-horizontal.cf-form-large[data-consent="both"] .cf-form-consent .cf-consent-field {
  width: 50%;
}

#cta_40233 .cf-form-2.cf-form-horizontal.cf-form-small[data-consent="both"] .cf-form-consent .cf-consent-field, #cta_40233 .cf-form-2.cf-form-horizontal.cf-form-mid[data-consent="both"] .cf-form-consent .cf-consent-field {
  width: 100%;
}

#cta_40233 .cf-form-2.cf-form-horizontal[data-consent="privacy"] .cf-form-consent .cf-privacy-consent {
  width: 100%;
}

#cta_40233 .cf-form-2.cf-form-horizontal[data-consent="marketing"] .cf-form-consent .cf-privacy-consent {
  width: 100%;
}

#cta_40233 .cf-form-2.cf-form-horizontal[data-consent="false"] .cf-form-consent {
  display: none !important;
}

#cta_40233 .cf-form-2.cf-form-horizontal .cf-form-button {
  width: 15%;
  float: left;
  position: relative;
}

#cta_40233 .cf-form-2.cf-form-horizontal .cf-form-button .cf-button {
  min-width: 50px !important;
  max-width: 100% !important;
  width: 100% !important;
}

#cta_40233 .cf-form-2.cf-form-horizontal.cf-form-small .cf-form-fields {
  width: 70%;
}

#cta_40233 .cf-form-2.cf-form-horizontal.cf-form-small .cf-form-button {
  width: 30%;
}

#cta_40233 .cf-form-2.cf-form-horizontal.cf-form-mid .cf-form-fields {
  width: 70%;
}
#cta_40233 .cf-form-2.cf-form-horizontal.cf-form-mid .cf-form-button {
  width: 30%;
}

#cta_40233 .cf-form-2.cf-form-horizontal.cf-form-wide .cf-form-fields {
  width: 80%;
}
#cta_40233 .cf-form-2.cf-form-horizontal.cf-form-wide .cf-form-button {
  width: 20%;
}

#cta_40233 .cf-form-2.cf-form-horizontal.cf-form-large .cf-form-fields {
  width: 80%;
}
#cta_40233 .cf-form-2.cf-form-horizontal.cf-form-large .cf-form-button {
  width: 20%;
}

#cta_40233 .cf-form-2 .cf-form-fields .cf-form-field .cf-label {
  display: inline !important;
}

#cta_40233 .cf-form-2[style*="font-family"] .cf-form-fields .cf-form-field .cf-label {
  font-family: inherit !important;
}

#cta_40233 .cf-form-2 label.error {
  display: none !important;
}

#cta_40233 .cf-form-2.cf-form-vertical .cf-form-fields .cf-form-field .contact-custom-field {
  float: none !important;
}

#cta_40233 .cf-form-2.cf-form-vertical .cf-form-fields .cf-form-field .contact-custom-field .cf-selection-options {
  padding-left: 2px;
}

#cta_40233 .cf-form-2.cf-form-horizontal .cf-form-fields .cf-form-field .contact-custom-field .cf-selection-options {
  padding-left: 5px;
  padding-top: 8px;
}

#cta_40233 .cf-form-2.cf-form-horizontal .cf-form-fields .cf-form-field p.cf-label {
  position: absolute;
  top: -25px;
}

#cta_40233 .cf-form-2.cf-form-horizontal.cf-field-regular .cf-email-validation {
  bottom: 10px !important;
}

#cta_40233 .cf-form-2.cf-form-horizontal.cf-field-large .cf-email-validation {
  bottom: 12px !important;
}

#cta_40233 .cf-form-2 .cf-form-fields select {
  -webkit-appearance: menulist-button !important;
}

#cta_40233 .cf-form-2 ::-webkit-input-placeholder, #cta_40233  .cf-form-2 :-ms-input-placeholder, #cta_40233  .cf-form-2 :-moz-placeholder, #cta_40233  .cf-form-2 ::-moz-placeholder {
  color: rgb(158, 158, 158) !important;
}

#cta_40233 .cf-form-2 :-moz-placeholder, .cf-form-2 ::-moz-placeholder {
  opacity: 1;
}

#cta_40233 .cf-form-2[style*="font-family"] .cf-form-consent, #cta_40233 .cf-form-2[style*="font-family"] .cf-form-consent .cf-consent-field {
  font-family: inherit !important;
}

#cta_40233 .cf-form-2 .cf-form-button {
  position: initial;
}

#cta_40233 .cf-form-2 .cf-form-button button p {
  font-size: inherit !important;
}

#cta_40233 .cf-form-2[style*="font-family"] .cf-form-button button p {
  font-family: inherit !important;
}

#cta_40233 .cf-form-2.cf-form-theme-default input[type="text"], #cta_40233  .cf-form-2.cf-form-theme-default input[type="email"], #cta_40233  .cf-form-2.cf-form-theme-default input[type="tel"], #cta_40233  .cf-form-2.cf-form-theme-default select, #cta_40233  .cf-form-2.cf-form-theme-default textarea {
  font-style: normal !important;
  width: 100% !important;
  max-width: 100% !important;
  -webkit-font-smoothing: antialiased !important;
  -moz-osx-font-smoothing: grayscale !important;
  color: #2F2F2F !important;
  outline-color: transparent;
  outline-style: none;
  background: #FFF;
  font-weight: 400 !important;
  border: 1px solid #DBDBDB !important;
  line-height: 1.5em !important;
  -webkit-box-sizing: border-box !important;
  -moz-box-sizing: border-box !important;
  box-sizing: border-box !important;
  box-shadow: none !important;
  height: initial !important;
  position: initial !important;
}

#cta_40233 .cf-form-2.cf-form-theme-default input::placeholder, #cta_40233  .cf-form-2.cf-form-theme-default select::placeholder, #cta_40233  .cf-form-2.cf-form-theme-default textarea::placeholder {
  color: #999 !important;
  font-style: initial !important;
  font-weight: initial !important;
}

#cta_40233 .cf-form-2.cf-form-theme-default[style*="font-family"] input[type="text"], #cta_40233  .cf-form-2.cf-form-theme-default[style*="font-family"] input[type="email"], #cta_40233  .cf-form-2.cf-form-theme-default[style*="font-family"] input[type="tel"], #cta_40233  .cf-form-2.cf-form-theme-default[style*="font-family"] select, #cta_40233  .cf-form-2.cf-form-theme-default[style*="font-family"] textarea {
  font-family: inherit !important;
}

#cta_40233 .cf-form-2.cf-form-theme-default input[type="checkbox"] {
  position: initial !important;
  height: initial !important;
}

#cta_40233  .cf-form-2.cf-form-theme-default select {
  height: 45px !important;
}

#cta_40233  .cf-form-2.cf-form-theme-default.cf-form-horizontal .cf-form-fields input[type="text"], #cta_40233  .cf-form-2.cf-form-theme-default.cf-form-horizontal .cf-form-fields input[type="email"], #cta_40233  .cf-form-2.cf-form-theme-default.cf-form-horizontal .cf-form-fields input[type="tel"], #cta_40233  .cf-form-2.cf-form-theme-default.cf-form-horizontal .cf-form-fields select, #cta_40233  .cf-form-2.cf-form-theme-default.cf-form-horizontal .cf-form-fields textarea {
  margin-bottom: 0px !important;
}

#cta_40233 .cf-form-2.cf-form-theme-default .cf-label {
  margin-bottom: 4px !important;
  font-size: 15px !important;
  line-height: 1.5 !important;
  margin: 0 !important;
  color: rgb(85, 88, 99);
  margin-top: 0px;
  border: 0px none !important;
  margin-bottom: 0px !important;
  height: initial !important;
}

#cta_40233 .cf-form-2[style*="font-family"].cf-form-theme-default .cf-label {
  font-family: inherit !important;
}

#cta_40233 .cf-form-2.cf-form-theme-default button {
  outline-color: transparent;
  outline-style: none;
  -webkit-font-smoothing: antialiased !important;
  -moz-osx-font-smoothing: grayscale !important;
  border-radius: 3px;
  font-style: normal !important;
  font-weight: 500 !important;
  cursor: pointer;
  line-height: initial !important;
}

/* regular size fields */
#cta_40233 .cf-form-2.cf-form-theme-default.cf-field-regular input[type="text"], #cta_40233  .cf-form-2.cf-form-theme-default.cf-field-regular input[type="email"], #cta_40233  .cf-form-2.cf-form-theme-default.cf-field-regular input[type="tel"], #cta_40233  .cf-form-2.cf-form-theme-default.cf-field-regular select, #cta_40233  .cf-form-2.cf-form-theme-default.cf-field-regular textarea {
  padding: 11px 0px 9px 10px !important;
  font-size: 15px !important;
  margin: 0px !important;
  margin-bottom: 10px !important;
}

#cta_40233 .cf-form-2.cf-form-theme-default.cf-field-fully-rounded.cf-field-regular input[type="text"], #cta_40233 .cf-form-2.cf-form-theme-default.cf-field-fully-rounded.cf-field-regular input[type="email"], #cta_40233  .cf-form-2.cf-form-theme-default.cf-field-fully-rounded.cf-field-regular input[type="tel"], #cta_40233  .cf-form-2.cf-form-theme-default.cf-field-fully-rounded.cf-field-regular select, #cta_40233 .cf-form-2.cf-form-theme-default.cf-field-fully-rounded.cf-field-regular textarea {
  padding: 11px 0px 9px 15px !important;
}

#cta_40233 .cf-form-2.cf-form-theme-default.cf-form-vertical.cf-field-regular button {
  padding: 10px 16px;
  font-size: 16px !important;
}

/* large size fields */
#cta_40233 .cf-form-2.cf-form-theme-default.cf-field-large input[type="text"], #cta_40233  .cf-form-2.cf-form-theme-default.cf-field-large input[type="email"], #cta_40233  .cf-form-2.cf-form-theme-default.cf-field-large input[type="tel"], #cta_40233  .cf-form-2.cf-form-theme-default.cf-field-large select, #cta_40233  .cf-form-2.cf-form-theme-default.cf-field-large textarea {
  padding: 12px 0px 10px 10px !important;
  font-size: 17px !important;
  margin-bottom: 10px !important;
  height: initial !important;
}

#cta_40233 .cf-form-2.cf-form-theme-default.cf-field-fully-rounded.cf-field-large input[type="text"], #cta_40233 .cf-form-2.cf-form-theme-default.cf-field-fully-rounded.cf-field-large input[type="email"], #cta_40233  .cf-form-2.cf-form-theme-default.cf-field-fully-rounded.cf-field-large input[type="tel"], #cta_40233  .cf-form-2.cf-form-theme-default.cf-field-fully-rounded.cf-field-large select, #cta_40233  .cf-form-2.cf-form-theme-default.cf-field-fully-rounded.cf-field-large textarea {
  padding: 12px 0px 10px 15px !important;
}

#cta_40233  .cf-form-2.cf-form-theme-default.cf-field-large select {
  height: 49px !important;
}

#cta_40233 .cf-form-2.cf-form-vertical.cf-field-large .cf-email-validation {
  bottom: 22px;
}

#cta_40233 .cf-form-2.cf-form-theme-default.cf-form-vertical.cf-field-large button {
  padding: 10px 20px;
  font-size: 18px !important;
}

#cta_40233 .cf-form-2.cf-form-theme-default.cf-form-horizontal .cf-button-outer {
  float: right !important;
  min-width: 101% !important;
}

#cta_40233 .cf-form-2.cf-form-theme-default.cf-form-horizontal.cf-field-regular .cf-button-outer button {
  height: 44px !important;
  padding-left: 5px !important;
  padding-right: 5px !important;
  padding-top: 8px !important;
  padding-bottom: 8px !important;
  font-size: 14px !important;
}

#cta_40233 .cf-form-2.cf-form-theme-default.cf-form-horizontal .cf-button-outer button .cf-text-element {
  white-space: nowrap !important;
}

#cta_40233 .cf-form-2.cf-form-theme-default.cf-field-regular.cf-form-horizontal .cf-button-outer .cf-button p {
  font-size: 14px !important;
}

#cta_40233 .cf-form-2.cf-form-theme-default.cf-field-large.cf-form-horizontal .cf-button-outer button {
  min-height: 49px !important;
  padding-left: 10px !important;
  padding-right: 10px !important;
  padding-top: 8px !important;
  padding-bottom: 8px !important;
  font-size: 16px !important;
}

#cta_40233 .cf-form-2.cf-form-theme-default.cf-field-large.cf-form-horizontal .cf-button-outer .cf-button p {
  font-size: 16px !important;
}

#cta_40233 .cf-form-2.cf-form-theme-default .cf-form-consent .cf-label {
  width: 100%;
}

#cta_40233 .cf-form-2.cf-form-theme-default .cf-tooltip {
  position: absolute;
  z-index: 1070;
  display: block;
  font-size: 12px;
  font-weight: normal;
  line-height: 1.4;
  filter: alpha(opacity=0);
  font-family: sans-serif;
}

#cta_40233 .cf-form-2[style*="font-family"].cf-form-theme-default .cf-tooltip {
  font-family: inherit;
}

#cta_40233 .cf-form-2.cf-form-theme-default .cf-tooltip.cf-top {
  padding: 5px 0;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

#cta_40233 .cf-form-2.cf-form-theme-default .cf-tooltip-arrow {
  position: absolute;
  width: 0;
  height: 0;
  border-color: transparent;
  border-style: solid;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

#cta_40233 .cf-form-2.cf-form-theme-default .cf-tooltip.cf-top .cf-tooltip-arrow {
  bottom: 0;
  left: 50%;
  margin-left: -5px;
  border-width: 5px 5px 0;
  border-top-color: black;
}

#cta_40233 .cf-form-2.cf-form-theme-default .cf-tooltip-inner {
  max-width: 200px;
  padding: 3px 8px;
  color: white;
  text-align: center;
  text-decoration: none;
  background-color: black;
  border-radius: 4px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  -webkit-font-smoothing: antialiased;
}

#cta_40233 .cf-form-2.cf-form-theme-default .cf-field-valid {
  border: 1px solid rgb(133, 209, 164); 
  background: rgb(242, 255, 248); 
  transition: background 0.5s ease, border 0.5s ease;
}

#cta_40233 .cf-form-2.cf-form-theme-default .cf-field-invalid {
  border: 1px solid #F17C69; 
  background: #FEF3F0; 
  transition: background 0.5s ease, border 0.5s ease;
}

#cta_40233 .cf-form-2.cf-form-theme-default .cf-validation-tooltip {
  background: none !important;
  margin-bottom: 50px;
  bottom: 0;
  opacity: 1 !important;
  z-index: 99999 !important;
}

#cta_40233 .cf-form-2.cf-form-theme-default .cf-validation-tooltip .cf-tooltip-inner {
  line-height: 0 !important;
  padding: 15px !important;
  font-weight: 600 !important;
}

#cta_40233 .cf-form-2.cf-form-theme-default .cf-error, #cta_40233 .cf-form-2.cf-form-theme-default input.cf-error, #cta_40233 .cf-form-2.cf-form-theme-default select.cf-error {
  border: 1px solid #F17C69 !important;
  background: #FEF3F0 !important;
  transition: background 0.5s ease, border 0.5s ease;
}

#cta_40233 .cf-form-2.cf-form-theme-default .cf-valid {
  border: 1px solid rgb(133, 209, 164) !important;
  background: rgb(242, 255, 248) !important;
  transition: background 0.5s ease, border 0.5s ease;
}

#cta_40233 .cf-form-2.cf-form-theme-default .cf-consent-label {
  line-height: 20px !important;
  font-size: 13px !important;
  display: inline-block !important;
  font-weight: 400 !important;
  max-width: 90% !important;
  white-space: initial !important;
}

#cta_40233 .cf-form-2.cf-form-theme-default .cf-consent-checkbox {
  margin: initial !important;
  margin-top: 4px !important;
  margin-right: 5px !important; 
  font-size: 20px !important; 
  display: inline-block !important; 
  vertical-align: top !important;
  -webkit-appearance: checkbox !important;
}

#cta_40233 .cf-col-xs-12, .cta40233 .cf-col-xs-12 {
  width: 100%;
  float: left;
}
#cta_40233 .cf-col-xs-11, .cta40233 .cf-col-xs-11 {
  width: 91.66666667%;
  float: left;
}
#cta_40233 .cf-col-xs-10, .cta40233 .cf-col-xs-10 {
  width: 83.33333333%;
  float: left;
}
#cta_40233 .cf-col-xs-9, .cta40233 .cf-col-xs-9 {
  width: 75%;
  float: left;
}
#cta_40233 .cf-col-xs-8, .cta40233 .cf-col-xs-8 {
  width: 66.66666667%;
  float: left;
}
#cta_40233 .cf-col-xs-7, .cta40233 .cf-col-xs-7 {
  width: 58.33333333%;
  float: left;
}
#cta_40233 .cf-col-xs-6, .cta40233 .cf-col-xs-6 {
  width: 50%;
  float: left;
}
#cta_40233 .cf-col-xs-5, .cta40233 .cf-col-xs-5 {
  width: 41.66666667%;
  float: left;
}
#cta_40233 .cf-col-xs-4, .cta40233 .cf-col-xs-4 {
  width: 33.33333333%;
  float: left;
}
#cta_40233 .cf-col-xs-3, .cta40233 .cf-col-xs-3 {
  width: 25%;
  float: left;
}
#cta_40233 .cf-col-xs-2, .cta40233 .cf-col-xs-2 {
  width: 16.66666667%;
  float: left;
}
#cta_40233 .cf-col-xs-1, .cta40233 .cf-col-xs-1 {
  width: 8.33333333%;
  float: left;
}

@media (min-width: 600px) {

  #cta_40233 .cf-section-container {
    display: flex;
  }

  #cta_40233 .cf-col-md-12 {
    width: 100%;
    float: left;
  }
  #cta_40233 .cf-col-md-11 {
    width: 91.66666667%;
    float: left;
  }
  #cta_40233 .cf-col-md-10 {
    width: 83.33333333%;
    float: left;
  }
  #cta_40233 .cf-col-md-9 {
    width: 75%;
    float: left;
  }
  #cta_40233 .cf-col-md-8 {
    width: 66.66666667%;
    float: left;
  }
  #cta_40233 .cf-col-md-7 {
    width: 58.33333333%;
    float: left;
  }
  #cta_40233 .cf-col-md-6 {
    width: 50%;
    float: left;
  }
  #cta_40233 .cf-col-md-5 {
    width: 41.66666667%;
    float: left;
  }
  #cta_40233 .cf-col-md-4 {
    width: 33.33333333%;
    float: left;
  }
  #cta_40233 .cf-col-md-3 {
    width: 25%;
    float: left;
  }
  #cta_40233 .cf-col-md-2 {
    width: 16.66666667%;
    float: left;
  }
  #cta_40233 .cf-col-md-1 {
    width: 8.33333333%;
    float: left;
  }
}

@media (min-width: 599px) {
  #cta_40233 .cf-hide-desktop {
    display: none !important;
  }
}

@media (max-width: 599px) {

  #cta_40233 .cf-hide-mobile {
    display: none !important;
  }

  #cta_40233 .cf-section-container {
    display: block;
  }

  #cta_40233 .cf-col-md-12 {
    width: 100%;
    float: left;
  }
  #cta_40233 .cf-col-md-11 {
    width: 100%;
    float: left;
  }
  #cta_40233 .cf-col-md-10 {
    width: 100%;
    float: left;
  }
  #cta_40233 .cf-col-md-9 {
    width: 100%;
    float: left;
  }
  #cta_40233 .cf-col-md-8 {
    width: 100%;
    float: left;
  }
  #cta_40233 .cf-col-md-7 {
    width: 100%;
    float: left;
  }
  #cta_40233 .cf-col-md-6 {
    width: 100%;
    float: left;
  }
  #cta_40233 .cf-col-md-5 {
    width: 100%;
    float: left;
  }
  #cta_40233 .cf-col-md-4 {
    width: 100%;
    float: left;
  }
  #cta_40233 .cf-col-md-3 {
    width: 100%;
    float: left;
  }
  #cta_40233 .cf-col-md-2 {
    width: 100%;
    float: left;
  }
  #cta_40233 .cf-col-md-1 {
    width: 100%;
    float: left;
  }

  #cta_40233 .cf-horizontal-somepadding {
    padding-left: 10%;
    padding-right: 10%;
  }

  #cta_40233 .cf-horizontal-morepadding {
    padding-left: 10%;
    padding-right: 10%;
  }

  #cta_40233 .cf-horizontal-verypadding {
    padding-left: 10%;
    padding-right: 10%;
  }

  #cta_40233 .cf-horizontal-verypadding2 {
    padding-left: 10%;
    padding-right: 10%;
  }

  #cta_40233 .cf-horizontal-verypadding3 {
    padding-left: 10%;
    padding-right: 10%;
  }

  #cta_40233 h1 {
    font-size: 1.6em !important;
  }

  #cta_40233 h2 {
    font-size: 1.2em !important;
  }

  #cta_40233 h3 {
    font-size: 0.9em !important;
  }
}

@media (max-width: 480px) {

  #cta_40233 h1 {
    font-size: 1.6em !important;
  }

  #cta_40233 h2 {
    font-size: 1.2em !important;
  }

  #cta_40233 h3 {
    font-size: 0.9em !important;
  }

  #cta_40233 button {
    width: 100% !important
  }

  #cta_40233 .cf-image img {
    height: auto !important;
  }
}

#cta40233 .has-transitions, .cta40233.has-transitions {
  -webkit-transition: -webkit-transform 0.3s, display 0s 0.3s;
  -moz-transition: -moz-transform 0.3s, display 0s 0.3s;
  transition: display 0.3s, display 0s 0.3s;
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
}

#cta40233 .is-visible, .cta40233.is-visible {
  visibility: visible !important;
}

#cta40233 .is-hidden, .cta40233.is-visible {
  -webkit-transition: -webkit-transform 0.3s;
  -moz-transition: -moz-transform 0.3s;
  transition: transform 0.3s;
  visibility: hidden !important;
}

#cta40233 .fade-in, .cta40233.is-visible  {
  display: block !important;
  -webkit-transform: scale(1);
  -moz-transform: scale(1);
  -ms-transform: scale(1);
  -o-transform: scale(1);
  transform: scale(1);
  -webkit-transition: -webkit-transform 0.3s, display 0s 0s;
  -moz-transition: -moz-transform 0.3s, display 0s 0s;
  transition: display 0.2s, display 0s 0s;
  -webkit-animation: cf-fade-in 0.2s;
  -moz-animation: cf-fade-in 0.2s;
  animation: cf-fade-in 0.2s;
}

#cta40233 .slide-up, .cta40233.slide-up {
  display: block !important;
  -webkit-transform: scale(1);
  -moz-transform: scale(1);
  -ms-transform: scale(1);
  -o-transform: scale(1);
  transform: scale(1);
  -webkit-transition: -webkit-transform 0.3s, display 0s 0s;
  -moz-transition: -moz-transform 0.3s, display 0s 0s;
  transition: display 0.2s, display 0s 0s;
  -webkit-animation: cf-slide-up 0.2s;
  -moz-animation: cf-slide-up 0.2s;
  animation: cf-slide-up 0.2s;
}

#cta40233 .slide-down, .cta40233.slide-down {
  display: block !important;
  -webkit-transform: scale(1);
  -moz-transform: scale(1);
  -ms-transform: scale(1);
  -o-transform: scale(1);
  transform: scale(1);
  -webkit-transition: -webkit-transform 0.3s, display 0s 0s;
  -moz-transition: -moz-transform 0.3s, display 0s 0s;
  transition: display 0.2s, display 0s 0s;
  -webkit-animation: cf-slide-down 0.2s;
  -moz-animation: cf-slide-down 0.2s;
  animation: cf-slide-down 0.2s;
}

#cta40233 .slide-right, .cta40233.slide-right {
  display: block !important;
  -webkit-transform: scale(1);
  -moz-transform: scale(1);
  -ms-transform: scale(1);
  -o-transform: scale(1);
  transform: scale(1);
  -webkit-transition: -webkit-transform 0.3s, display 0s 0s;
  -moz-transition: -moz-transform 0.3s, display 0s 0s;
  transition: display 0.2s, display 0s 0s;
  -webkit-animation: cf-slide-right 0.2s;
  -moz-animation: cf-slide-right 0.2s;
  animation: cf-slide-right 0.2s;
}

#cta40233 .pop-bottom-right, .cta40233.pop-bottom-right {
  display: block !important;
  -webkit-transform: scale(1);
  -moz-transform: scale(1);
  -ms-transform: scale(1);
  -o-transform: scale(1);
  transform: scale(1);
  -webkit-transition: -webkit-transform 0.3s, display 0s 0s;
  -moz-transition: -moz-transform 0.3s, display 0s 0s;
  transition: display 0.2s, display 0s 0s;
  -webkit-animation: cf-pop-bottom-right 0.2s;
  -moz-animation: cf-pop-bottom-right 0.2s;
  animation: cf-pop-bottom-right 0.2s;
}

#cta_40233 .cf-section-container.cf-section-page-width {
  max-width: 1200px;
}

@keyframes cf-slide-up {
  0% {
    -webkit-transform: translateY(300px);
    -moz-transform: translateY(300px);
    -ms-transform: translateY(300px);
    -o-transform: translateY(300px);
    transform: translateY(300px);
    opacity: 0;
  }

  100% {
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -ms-transform: translateY(0);
    -o-transform: translateY(0);
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes cf-slide-down {
  0% {
    -webkit-transform: translateY(-300px);
    -moz-transform: translateY(-300px);
    -ms-transform: translateY(-300px);
    -o-transform: translateY(-300px);
    transform: translateY(-300px);
    opacity: 0;
  }

  100% {
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -ms-transform: translateY(0);
    -o-transform: translateY(0);
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes cf-slide-right {
  0% {
    -webkit-transform: translateX(300px);
    -moz-transform: translateX(300px);
    -ms-transform: translateX(300px);
    -o-transform: translateX(300px);
    transform: translateX(300px);
    opacity: 0;
  }

  100% {
    -webkit-transform: translateX(0);
    -moz-transform: translateX(0);
    -ms-transform: translateX(0);
    -o-transform: translateX(0);
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes cf-pop-bottom-right {
  0% {
    -webkit-transform: scale(0);
    -moz-transform: scale(0);
    -ms-transform: scale(0);
    -o-transform: scale(0);
    transform: scale(0);
    opacity: 0;
  }

  100% {
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -ms-transform: scale(1);
    -o-transform: scale(1);
    transform: scale(1);
    opacity: 1;
  }
}

@keyframes cf-fade-in {
  0% {
    opacity: 0;
  }

  100% {
    opacity: 1;
  }
}

.cf-spinner {
  -webkit-animation-name: cf-spin;
  -webkit-animation-duration: 1000ms;
  -webkit-animation-iteration-count: infinite;
  -webkit-animation-timing-function: linear;
  
  -moz-animation-name: cf-spin;
  -moz-animation-duration: 1000ms;
  -moz-animation-iteration-count: infinite;
  -moz-animation-timing-function: linear;
  
  -ms-animation-name: cf-spin;
  -ms-animation-duration: 1000ms;
  -ms-animation-iteration-count: infinite;
  -ms-animation-timing-function: linear;
  
  animation-name: cf-spin;
  animation-duration: 1000ms;
  animation-iteration-count: infinite;
  animation-timing-function: linear;
}

@-ms-keyframes cf-spin {
  from { -ms-transform: rotate(0deg); }
  to   { -ms-transform: rotate(-360deg); }
}
@-moz-keyframes cf-spin {
  from { -moz-transform: rotate(0deg); }
  to   { -moz-transform: rotate(-360deg); }
}
@-webkit-keyframes cf-spin {
  from { -webkit-transform: rotate(0deg); }
  to   { -webkit-transform: rotate(-360deg); }
}
@keyframes cf-spin {
  from { transform:rotate(0deg); }
  to   { transform:rotate(-360deg); }
}
</style>

</div>
<div class="cf-powered-by" style="bottom: 0px; padding: 5px 7px 7px; width: 100%; text-align: center; box-sizing: border-box; height: 30px; line-height: 22px !important; background: rgba(22, 31, 49, 0.85) none repeat scroll 0% 0%; position: fixed; z-index: 100000; cursor: pointer;"><a rel="nofollow" href="https://www.convertflow.com/popups?utm_source=poweredby&amp;utm_medium=cta&amp;utm_campaign=overlay&amp;utm_term=dappuniversity.com&amp;utm_content=40233" target="_blank" style="cursor: pointer; font-family: Helvetica Neue, Helvetica, Arial, San-serif !important; letter-spacing: 0.5px !important; color: rgb(255, 255, 255) !important;"><div class="cf-powered-by-inner" style="display: block !important; margin-left: auto !important; margin-right: auto !important; max-width: 143px !important; -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box; font-family: inherit !important; color: inherit !important;"><span style="float: left; font-size: 11px; font-family: inherit !important; color: inherit !important; letter-spacing: inherit !important;">Crafted in</span><img style="width: 11px !important; transition: all 0.2s ease !important; left: 0 !important; right: 0 !important; float: left !important; margin-left: 4px !important; margin-right: auto !important; margin-top: 6px !important;" src="Solidity%20for%20Beginners%20%C2%B7%20Smart%20Contract%20Development%20Crash%20Course%20Dapp%20University_files/convertflow-crafted-in-icon-white.webp"><span style="float: right; font-size: 11px; font-family: inherit !important; color: inherit !important; letter-spacing: inherit !important;">ConvertFlow</span></div></a></div></div></body></html>